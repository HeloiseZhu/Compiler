NEW NODE: TYPE
[  1]            TYPE: int
NEW NODE: Specifier
NEW NODE: ID
[  1]              ID: words
NEW NODE: LB
[  1]              LB: [
NEW NODE: VarDec
NEW NODE: INT
[  1]             INT: 100
NEW NODE: RB
[  1]              RB: ]
NEW NODE: VarDec
NEW NODE: SEMI
[  1]            SEMI: ;
NEW NODE: ExtDecList
NEW NODE: ExtDef
NEW NODE: TYPE
[  3]            TYPE: int
NEW NODE: Specifier
NEW NODE: ID
[  3]              ID: defineFirst
NEW NODE: LP
[  3]              LP: (
NEW NODE: TYPE
[  3]            TYPE: int
NEW NODE: Specifier
NEW NODE: ID
[  3]              ID: a
NEW NODE: VarDec
NEW NODE: COMMA
[  3]           COMMA: ,
NEW NODE: ParamDec
NEW NODE: TYPE
[  3]            TYPE: int
NEW NODE: Specifier
NEW NODE: ID
[  3]              ID: b
NEW NODE: VarDec
NEW NODE: RP
[  3]              RP: )
NEW NODE: ParamDec
NEW NODE: VarList
NEW NODE: VarList
NEW NODE: FunDec
NEW NODE: SEMI
[  3]            SEMI: ;
[bison]Error type B at Line 3: syntax error, near ";"
NEW NODE: ExtDef
NEW NODE: error
NEW NODE: TYPE
[  5]            TYPE: int
NEW NODE: Specifier
NEW NODE: ID
[  5]              ID: typeOut
NEW NODE: LP
[  5]              LP: (
NEW NODE: TYPE
[  5]            TYPE: int
NEW NODE: Specifier
NEW NODE: ID
[  5]              ID: word
NEW NODE: VarDec
NEW NODE: COMMA
[  5]           COMMA: ,
NEW NODE: ParamDec
NEW NODE: TYPE
[  5]            TYPE: int
NEW NODE: Specifier
NEW NODE: ID
[  5]              ID: position
NEW NODE: VarDec
NEW NODE: RP
[  5]              RP: )
NEW NODE: ParamDec
NEW NODE: VarList
NEW NODE: VarList
NEW NODE: FunDec
NEW NODE: LC
[  5]              LC: {
NEW NODE: TYPE
[  6]            TYPE: int
NEW NODE: Specifier
NEW NODE: ID
[  6]              ID: results
NEW NODE: VarDec
NEW NODE: SEMI
[  6]            SEMI: ;
NEW NODE: Dec
NEW NODE: DecList
NEW NODE: Def
NEW NODE: IF
[  7]              IF: if
NEW NODE: DefList
NEW NODE: DefList
NEW NODE: LP
[  7]              LP: (
NEW NODE: ID
[  7]              ID: position
NEW NODE: RELOP
[  7]           RELOP: <
NEW NODE: Exp
NEW NODE: INT
[  7]             INT: 100
NEW NODE: Exp
NEW NODE: AND
[  7]             AND: &&
NEW NODE: Exp
NEW NODE: INT
[  7]             INT: 0
NEW NODE: Exp
NEW NODE: RELOP
[  7]           RELOP: >=
NEW NODE: ID
[  7]              ID: position
NEW NODE: RP
[  7]              RP: )
NEW NODE: Exp
NEW NODE: Exp
NEW NODE: Exp
NEW NODE: LC
[  7]              LC: {
NEW NODE: ID
[  8]              ID: words
NEW NODE: DefList
NEW NODE: LB
[  8]              LB: [
NEW NODE: Exp
NEW NODE: ID
[  8]              ID: position
NEW NODE: RB
[  8]              RB: ]
NEW NODE: Exp
NEW NODE: Exp
NEW NODE: ASSIGNOP
[  8]        ASSIGNOP: =
NEW NODE: ID
[  8]              ID: word
NEW NODE: SEMI
[  8]            SEMI: ;
NEW NODE: Exp
NEW NODE: Exp
NEW NODE: Stmt
NEW NODE: ID
[  9]              ID: results
NEW NODE: ASSIGNOP
[  9]        ASSIGNOP: =
NEW NODE: Exp
NEW NODE: INT
[  9]             INT: 1
NEW NODE: Exp
NEW NODE: SEMI
[  9]            SEMI: ;
NEW NODE: Exp
NEW NODE: Stmt
NEW NODE: RC
[ 10]              RC: }
NEW NODE: StmtList
NEW NODE: StmtList
NEW NODE: StmtList
NEW NODE: CompSt
NEW NODE: Stmt
NEW NODE: IF
[ 11]              IF: if
NEW NODE: Stmt
NEW NODE: LP
[ 11]              LP: (
NEW NODE: ID
[ 11]              ID: position
NEW NODE: RELOP
[ 11]           RELOP: >=
NEW NODE: Exp
NEW NODE: INT
[ 11]             INT: 100
NEW NODE: Exp
NEW NODE: RP
[ 11]              RP: )
NEW NODE: Exp
NEW NODE: LC
[ 11]              LC: {
NEW NODE: ID
[ 12]              ID: words
NEW NODE: DefList
NEW NODE: LB
[ 12]              LB: [
NEW NODE: Exp
NEW NODE: INT
[ 12]             INT: 99
NEW NODE: Exp
NEW NODE: RB
[ 12]              RB: ]
NEW NODE: Exp
NEW NODE: ASSIGNOP
[ 12]        ASSIGNOP: =
NEW NODE: ID
[ 12]              ID: word
NEW NODE: SEMI
[ 12]            SEMI: ;
NEW NODE: Exp
NEW NODE: Exp
NEW NODE: Stmt
NEW NODE: ID
[ 13]              ID: results
NEW NODE: ASSIGNOP
[ 13]        ASSIGNOP: =
NEW NODE: Exp
NEW NODE: INT
[ 13]             INT: 2
NEW NODE: Exp
NEW NODE: SEMI
[ 13]            SEMI: ;
NEW NODE: Exp
NEW NODE: Stmt
NEW NODE: RC
[ 14]              RC: }
NEW NODE: StmtList
NEW NODE: StmtList
NEW NODE: StmtList
NEW NODE: CompSt
NEW NODE: Stmt
NEW NODE: IF
[ 15]              IF: if
NEW NODE: Stmt
NEW NODE: LP
[ 15]              LP: (
NEW NODE: ID
[ 15]              ID: position
NEW NODE: RELOP
[ 15]           RELOP: <
NEW NODE: Exp
NEW NODE: INT
[ 15]             INT: 0
NEW NODE: Exp
NEW NODE: RP
[ 15]              RP: )
NEW NODE: Exp
NEW NODE: LC
[ 15]              LC: {
NEW NODE: ID
[ 16]              ID: words
NEW NODE: DefList
NEW NODE: LB
[ 16]              LB: [
NEW NODE: Exp
NEW NODE: INT
[ 16]             INT: 0
NEW NODE: Exp
NEW NODE: RB
[ 16]              RB: ]
NEW NODE: Exp
NEW NODE: ASSIGNOP
[ 16]        ASSIGNOP: =
NEW NODE: ID
[ 16]              ID: word
NEW NODE: SEMI
[ 16]            SEMI: ;
NEW NODE: Exp
NEW NODE: Exp
NEW NODE: Stmt
NEW NODE: ID
[ 17]              ID: results
NEW NODE: ASSIGNOP
[ 17]        ASSIGNOP: =
NEW NODE: Exp
NEW NODE: MINUS
[ 17]           MINUS: -
NEW NODE: INT
[ 17]             INT: 1
NEW NODE: Exp
NEW NODE: SEMI
[ 17]            SEMI: ;
NEW NODE: Exp
NEW NODE: Exp
NEW NODE: Stmt
NEW NODE: RC
[ 18]              RC: }
NEW NODE: StmtList
NEW NODE: StmtList
NEW NODE: StmtList
NEW NODE: CompSt
NEW NODE: Stmt
NEW NODE: RETURN
[ 19]          RETURN: return
NEW NODE: Stmt
NEW NODE: ID
[ 19]              ID: results
NEW NODE: SEMI
[ 19]            SEMI: ;
NEW NODE: Exp
NEW NODE: Stmt
NEW NODE: RC
[ 20]              RC: }
NEW NODE: StmtList
NEW NODE: StmtList
NEW NODE: StmtList
NEW NODE: StmtList
NEW NODE: StmtList
NEW NODE: CompSt
NEW NODE: ExtDef
NEW NODE: TYPE
[ 22]            TYPE: int
NEW NODE: Specifier
NEW NODE: ID
[ 22]              ID: defineFirst
NEW NODE: LP
[ 22]              LP: (
NEW NODE: TYPE
[ 22]            TYPE: int
NEW NODE: Specifier
NEW NODE: ID
[ 22]              ID: a
NEW NODE: VarDec
NEW NODE: COMMA
[ 22]           COMMA: ,
NEW NODE: ParamDec
NEW NODE: TYPE
[ 22]            TYPE: int
NEW NODE: Specifier
NEW NODE: ID
[ 22]              ID: b
NEW NODE: VarDec
NEW NODE: RP
[ 22]              RP: )
NEW NODE: ParamDec
NEW NODE: VarList
NEW NODE: VarList
NEW NODE: FunDec
NEW NODE: LC
[ 22]              LC: {
NEW NODE: RETURN
[ 23]          RETURN: return
NEW NODE: DefList
NEW NODE: ID
[ 23]              ID: a
NEW NODE: PLUS
[ 23]            PLUS: +
NEW NODE: Exp
NEW NODE: ID
[ 23]              ID: b
NEW NODE: SEMI
[ 23]            SEMI: ;
NEW NODE: Exp
NEW NODE: Exp
NEW NODE: Stmt
NEW NODE: RC
[ 24]              RC: }
NEW NODE: StmtList
NEW NODE: StmtList
NEW NODE: CompSt
NEW NODE: ExtDef
NEW NODE: TYPE
[ 26]            TYPE: int
NEW NODE: Specifier
NEW NODE: ID
[ 26]              ID: main
NEW NODE: LP
[ 26]              LP: (
NEW NODE: RP
[ 26]              RP: )
NEW NODE: FunDec
NEW NODE: LC
[ 26]              LC: {
NEW NODE: TYPE
[ 27]            TYPE: int
NEW NODE: Specifier
NEW NODE: ID
[ 27]              ID: i
NEW NODE: VarDec
NEW NODE: COMMA
[ 27]           COMMA: ,
NEW NODE: Dec
NEW NODE: ID
[ 27]              ID: N
NEW NODE: VarDec
NEW NODE: SEMI
[ 27]            SEMI: ;
NEW NODE: Dec
NEW NODE: DecList
NEW NODE: DecList
NEW NODE: Def
NEW NODE: ID
[ 28]              ID: i
NEW NODE: DefList
NEW NODE: DefList
NEW NODE: ASSIGNOP
[ 28]        ASSIGNOP: =
NEW NODE: Exp
NEW NODE: INT
[ 28]             INT: 0
NEW NODE: Exp
NEW NODE: SEMI
[ 28]            SEMI: ;
NEW NODE: Exp
NEW NODE: Stmt
NEW NODE: ID
[ 29]              ID: N
NEW NODE: ASSIGNOP
[ 29]        ASSIGNOP: =
NEW NODE: Exp
NEW NODE: INT
[ 29]             INT: 3
NEW NODE: Exp
NEW NODE: SEMI
[ 29]            SEMI: ;
NEW NODE: Exp
NEW NODE: Stmt
NEW NODE: WHILE
[ 30]           WHILE: while
NEW NODE: LP
[ 30]              LP: (
NEW NODE: ID
[ 30]              ID: typeOut
NEW NODE: LP
[ 30]              LP: (
NEW NODE: ID
[ 30]              ID: N
NEW NODE: COMMA
[ 30]           COMMA: ,
NEW NODE: Exp
NEW NODE: ID
[ 30]              ID: i
NEW NODE: RP
[ 30]              RP: )
NEW NODE: Exp
NEW NODE: Args
NEW NODE: Args
NEW NODE: Exp
NEW NODE: RELOP
[ 30]           RELOP: ==
NEW NODE: INT
[ 30]             INT: 1
NEW NODE: Exp
NEW NODE: RP
[ 30]              RP: )
NEW NODE: Exp
NEW NODE: LC
[ 30]              LC: {
NEW NODE: ID
[ 31]              ID: N
NEW NODE: DefList
NEW NODE: ASSIGNOP
[ 31]        ASSIGNOP: =
NEW NODE: Exp
NEW NODE: MINUS
[ 31]           MINUS: -
NEW NODE: LP
[ 31]              LP: (
NEW NODE: ID
[ 31]              ID: N
NEW NODE: MINUS
[ 31]           MINUS: -
NEW NODE: Exp
NEW NODE: INT
[ 31]             INT: 3
NEW NODE: Exp
NEW NODE: RP
[ 31]              RP: )
NEW NODE: Exp
NEW NODE: Exp
NEW NODE: SEMI
[ 31]            SEMI: ;
NEW NODE: Exp
NEW NODE: Exp
NEW NODE: Stmt
NEW NODE: ID
[ 32]              ID: i
NEW NODE: ASSIGNOP
[ 32]        ASSIGNOP: =
NEW NODE: Exp
NEW NODE: ID
[ 32]              ID: i
NEW NODE: PLUS
[ 32]            PLUS: +
NEW NODE: Exp
NEW NODE: ID
[ 32]              ID: N
NEW NODE: PLUS
[ 32]            PLUS: +
NEW NODE: Exp
NEW NODE: Exp
NEW NODE: INT
[ 32]             INT: 2
NEW NODE: Exp
NEW NODE: SEMI
[ 32]            SEMI: ;
NEW NODE: Exp
NEW NODE: Exp
NEW NODE: Stmt
NEW NODE: RC
[ 33]              RC: }
NEW NODE: StmtList
NEW NODE: StmtList
NEW NODE: StmtList
NEW NODE: CompSt
NEW NODE: Stmt
NEW NODE: Stmt
NEW NODE: RETURN
[ 34]          RETURN: return
NEW NODE: ID
[ 34]              ID: N
NEW NODE: SEMI
[ 34]            SEMI: ;
NEW NODE: Exp
NEW NODE: Stmt
NEW NODE: RC
[ 35]              RC: }
NEW NODE: StmtList
NEW NODE: StmtList
NEW NODE: StmtList
NEW NODE: StmtList
NEW NODE: StmtList
NEW NODE: CompSt
NEW NODE: ExtDef
NEW NODE: ExtDefList
NEW NODE: ExtDefList
NEW NODE: ExtDefList
NEW NODE: ExtDefList
NEW NODE: ExtDefList
NEW NODE: ExtDefList
NEW NODE: Program
[bison]Error type B at Line 36: , near ""
Miss 1 Syntax Error.
IN SEMANTIC ANALYSIS
Search for Insert: name: words, ns: 2
Insert Symbol: name: words
------------------------------
stack 0:
	name: words, src: GVAR
------------------------------
[DEBUG] Finish Analysing VarDec4Var.
[DEBUG] Finish Analysing VarDec4Var.
[DEBUG] Finish Analysing ExtDecList.
[DEBUG] Finish Analysing ExtDef.
[DEBUG] Error in semantic analysis.
[DEBUG] Finish Analysing ExtDef.
Search for Insert: name: word, ns: 3
Insert Symbol: name: word
------------------------------
stack 1:
	name: word, src: LVAR
stack 0:
	name: words, src: GVAR
------------------------------
[DEBUG] Finish Analysing VarDec4Param.
[DEBUG] Finish Analysing ParamDec.
Search for Insert: name: position, ns: 3
Insert Symbol: name: position
------------------------------
stack 1:
	name: position, src: LVAR
	name: word, src: LVAR
stack 0:
	name: words, src: GVAR
------------------------------
[DEBUG] Finish Analysing VarDec4Param.
[DEBUG] Finish Analysing ParamDec.
[DEBUG] Finish Analysing VarList.
[DEBUG] Finish Analysing VarList.
[DEBUG] Finish Analysing FunDec.
Search for Insert: name: typeOut, ns: 0
Insert Symbol: name: typeOut
------------------------------
stack 1:
	name: position, src: LVAR
	name: word, src: LVAR
stack 0:
	name: typeOut, src: FUNC
	name: words, src: GVAR
------------------------------
Search for Insert: name: results, ns: 3
Insert Symbol: name: results
------------------------------
stack 1:
	name: results, src: LVAR
	name: position, src: LVAR
	name: word, src: LVAR
stack 0:
	name: typeOut, src: FUNC
	name: words, src: GVAR
------------------------------
[DEBUG] Finish Analysing VarDec4Var.
[DEBUG] Finish Analysing Dec4LocalVar.
[DEBUG] Finish Analysing DecList4LocalVar.
[DEBUG] Finish Analysing Def4LocalVar.
[DEBUG] Finish Analysing DefList4LocalVar.
[DEBUG] Finish Analysing DefList4LocalVar.
Search for Use: name: position, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
Search for Use: name: position, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing DefList4LocalVar.
Search for Use: name: words, ns: 3
Search for Use: name: words, ns: 2
[DEBUG] Finish Analysing Exp.
Search for Use: name: position, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
Search for Use: name: word, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Stmt.
Search for Use: name: results, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Stmt.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing CompSt.
Clear Stack Top
------------------------------
stack 2:
stack 1:
	name: results, src: LVAR
	name: position, src: LVAR
	name: word, src: LVAR
stack 0:
	name: typeOut, src: FUNC
	name: words, src: GVAR
------------------------------
[DEBUG] Finish Analysing Stmt.
[DEBUG] Finish Analysing Stmt.
Search for Use: name: position, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing DefList4LocalVar.
Search for Use: name: words, ns: 3
Search for Use: name: words, ns: 2
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
Search for Use: name: word, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Stmt.
Search for Use: name: results, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Stmt.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing CompSt.
Clear Stack Top
------------------------------
stack 2:
stack 1:
	name: results, src: LVAR
	name: position, src: LVAR
	name: word, src: LVAR
stack 0:
	name: typeOut, src: FUNC
	name: words, src: GVAR
------------------------------
[DEBUG] Finish Analysing Stmt.
[DEBUG] Finish Analysing Stmt.
Search for Use: name: position, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing DefList4LocalVar.
Search for Use: name: words, ns: 3
Search for Use: name: words, ns: 2
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
Search for Use: name: word, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Stmt.
Search for Use: name: results, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Stmt.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing CompSt.
Clear Stack Top
------------------------------
stack 2:
stack 1:
	name: results, src: LVAR
	name: position, src: LVAR
	name: word, src: LVAR
stack 0:
	name: typeOut, src: FUNC
	name: words, src: GVAR
------------------------------
[DEBUG] Finish Analysing Stmt.
[DEBUG] Finish Analysing Stmt.
Search for Use: name: results, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Stmt.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing CompSt.
Clear Stack Top
------------------------------
stack 1:
stack 0:
	name: typeOut, src: FUNC
	name: words, src: GVAR
------------------------------
[DEBUG] Finish Analysing ExtDef.
Search for Insert: name: a, ns: 3
Insert Symbol: name: a
------------------------------
stack 1:
	name: a, src: LVAR
stack 0:
	name: typeOut, src: FUNC
	name: words, src: GVAR
------------------------------
[DEBUG] Finish Analysing VarDec4Param.
[DEBUG] Finish Analysing ParamDec.
Search for Insert: name: b, ns: 3
Insert Symbol: name: b
------------------------------
stack 1:
	name: b, src: LVAR
	name: a, src: LVAR
stack 0:
	name: typeOut, src: FUNC
	name: words, src: GVAR
------------------------------
[DEBUG] Finish Analysing VarDec4Param.
[DEBUG] Finish Analysing ParamDec.
[DEBUG] Finish Analysing VarList.
[DEBUG] Finish Analysing VarList.
[DEBUG] Finish Analysing FunDec.
Search for Insert: name: defineFirst, ns: 0
Insert Symbol: name: defineFirst
------------------------------
stack 1:
	name: b, src: LVAR
	name: a, src: LVAR
stack 0:
	name: defineFirst, src: FUNC
	name: typeOut, src: FUNC
	name: words, src: GVAR
------------------------------
[DEBUG] Finish Analysing DefList4LocalVar.
Search for Use: name: a, ns: 3
[DEBUG] Finish Analysing Exp.
Search for Use: name: b, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Stmt.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing CompSt.
Clear Stack Top
------------------------------
stack 1:
stack 0:
	name: defineFirst, src: FUNC
	name: typeOut, src: FUNC
	name: words, src: GVAR
------------------------------
[DEBUG] Finish Analysing ExtDef.
[DEBUG] Finish Analysing FunDec.
Search for Insert: name: main, ns: 0
Insert Symbol: name: main
------------------------------
stack 1:
stack 0:
	name: main, src: FUNC
	name: defineFirst, src: FUNC
	name: typeOut, src: FUNC
	name: words, src: GVAR
------------------------------
Search for Insert: name: i, ns: 3
Insert Symbol: name: i
------------------------------
stack 1:
	name: i, src: LVAR
stack 0:
	name: main, src: FUNC
	name: defineFirst, src: FUNC
	name: typeOut, src: FUNC
	name: words, src: GVAR
------------------------------
[DEBUG] Finish Analysing VarDec4Var.
[DEBUG] Finish Analysing Dec4LocalVar.
Search for Insert: name: N, ns: 3
Insert Symbol: name: N
------------------------------
stack 1:
	name: N, src: LVAR
	name: i, src: LVAR
stack 0:
	name: main, src: FUNC
	name: defineFirst, src: FUNC
	name: typeOut, src: FUNC
	name: words, src: GVAR
------------------------------
[DEBUG] Finish Analysing VarDec4Var.
[DEBUG] Finish Analysing Dec4LocalVar.
[DEBUG] Finish Analysing DecList4LocalVar.
[DEBUG] Finish Analysing DecList4LocalVar.
[DEBUG] Finish Analysing Def4LocalVar.
[DEBUG] Finish Analysing DefList4LocalVar.
[DEBUG] Finish Analysing DefList4LocalVar.
Search for Use: name: i, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Stmt.
Search for Use: name: N, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Stmt.
Search for Use: name: typeOut, ns: 0
Search for Use: name: N, ns: 3
[DEBUG] Finish Analysing Exp.
Search for Use: name: i, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Args.
[DEBUG] Finish Analysing Args.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing DefList4LocalVar.
Search for Use: name: N, ns: 3
[DEBUG] Finish Analysing Exp.
Search for Use: name: N, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Stmt.
Search for Use: name: i, ns: 3
[DEBUG] Finish Analysing Exp.
Search for Use: name: i, ns: 3
[DEBUG] Finish Analysing Exp.
Search for Use: name: N, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Stmt.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing CompSt.
Clear Stack Top
------------------------------
stack 2:
stack 1:
	name: N, src: LVAR
	name: i, src: LVAR
stack 0:
	name: main, src: FUNC
	name: defineFirst, src: FUNC
	name: typeOut, src: FUNC
	name: words, src: GVAR
------------------------------
[DEBUG] Finish Analysing Stmt.
[DEBUG] Finish Analysing Stmt.
Search for Use: name: N, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Stmt.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing CompSt.
Clear Stack Top
------------------------------
stack 1:
stack 0:
	name: main, src: FUNC
	name: defineFirst, src: FUNC
	name: typeOut, src: FUNC
	name: words, src: GVAR
------------------------------
[DEBUG] Finish Analysing ExtDef.
[DEBUG] Finish Analysing ExtDefList.
[DEBUG] Finish Analysing ExtDefList.
[DEBUG] Finish Analysing ExtDefList.
[DEBUG] Finish Analysing ExtDefList.
[DEBUG] Finish Analysing ExtDefList.
[DEBUG] Finish Analysing ExtDefList.
[DEBUG] Finish Analysing Program.
