NEW NODE: STRUCT
[  1]          STRUCT: struct
NEW NODE: ID
[  1]              ID: Defined
NEW NODE: LC
[  1]              LC: {
NEW NODE: OptTag
NEW NODE: TYPE
[  2]            TYPE: int
NEW NODE: Specifier
NEW NODE: ID
[  2]              ID: name
NEW NODE: VarDec
NEW NODE: SEMI
[  2]            SEMI: ;
NEW NODE: Dec
NEW NODE: DecList
NEW NODE: Def
NEW NODE: TYPE
[  3]            TYPE: float
NEW NODE: Specifier
NEW NODE: ID
[  3]              ID: ty
NEW NODE: VarDec
NEW NODE: SEMI
[  3]            SEMI: ;
NEW NODE: Dec
NEW NODE: DecList
NEW NODE: Def
NEW NODE: RC
[  4]              RC: }
NEW NODE: DefList
NEW NODE: DefList
NEW NODE: DefList
NEW NODE: StructSpecifier
NEW NODE: Specifier
NEW NODE: SEMI
[  4]            SEMI: ;
NEW NODE: ExtDef
NEW NODE: TYPE
[  6]            TYPE: int
NEW NODE: Specifier
NEW NODE: ID
[  6]              ID: sequence
NEW NODE: LB
[  6]              LB: [
NEW NODE: VarDec
NEW NODE: INT
[  6]             INT: 1000
NEW NODE: RB
[  6]              RB: ]
NEW NODE: VarDec
NEW NODE: SEMI
[  6]            SEMI: ;
NEW NODE: ExtDecList
NEW NODE: ExtDef
NEW NODE: TYPE
[  7]            TYPE: int
NEW NODE: Specifier
NEW NODE: ID
[  7]              ID: quickSort
NEW NODE: LP
[  7]              LP: (
NEW NODE: TYPE
[  7]            TYPE: int
NEW NODE: Specifier
NEW NODE: ID
[  7]              ID: start
NEW NODE: VarDec
NEW NODE: COMMA
[  7]           COMMA: ,
NEW NODE: ParamDec
NEW NODE: TYPE
[  7]            TYPE: int
NEW NODE: Specifier
NEW NODE: ID
[  7]              ID: end
NEW NODE: VarDec
NEW NODE: RP
[  7]              RP: )
NEW NODE: ParamDec
NEW NODE: VarList
NEW NODE: VarList
NEW NODE: FunDec
NEW NODE: LC
[  7]              LC: {
NEW NODE: TYPE
[  8]            TYPE: int
NEW NODE: Specifier
NEW NODE: ID
[  8]              ID: i
NEW NODE: VarDec
NEW NODE: COMMA
[  8]           COMMA: ,
NEW NODE: Dec
NEW NODE: ID
[  8]              ID: j
NEW NODE: VarDec
NEW NODE: COMMA
[  8]           COMMA: ,
NEW NODE: Dec
NEW NODE: ID
[  8]              ID: x
NEW NODE: VarDec
NEW NODE: SEMI
[  8]            SEMI: ;
NEW NODE: Dec
NEW NODE: DecList
NEW NODE: DecList
NEW NODE: DecList
NEW NODE: Def
NEW NODE: ID
[  9]              ID: i
NEW NODE: DefList
NEW NODE: DefList
NEW NODE: ASSIGNOP
[  9]        ASSIGNOP: =
NEW NODE: Exp
NEW NODE: ID
[  9]              ID: start
NEW NODE: SEMI
[  9]            SEMI: ;
NEW NODE: Exp
NEW NODE: Exp
NEW NODE: Stmt
NEW NODE: ID
[ 10]              ID: j
NEW NODE: ASSIGNOP
[ 10]        ASSIGNOP: =
NEW NODE: Exp
NEW NODE: ID
[ 10]              ID: end
NEW NODE: SEMI
[ 10]            SEMI: ;
NEW NODE: Exp
NEW NODE: Exp
NEW NODE: Stmt
NEW NODE: ID
[ 11]              ID: x
NEW NODE: ASSIGNOP
[ 11]        ASSIGNOP: =
NEW NODE: Exp
NEW NODE: ID
[ 11]              ID: sequence
NEW NODE: LB
[ 11]              LB: [
NEW NODE: Exp
NEW NODE: ID
[ 11]              ID: i
NEW NODE: RB
[ 11]              RB: ]
NEW NODE: Exp
NEW NODE: Exp
NEW NODE: SEMI
[ 11]            SEMI: ;
NEW NODE: Exp
NEW NODE: Stmt
NEW NODE: IF
[ 12]              IF: if
NEW NODE: LP
[ 12]              LP: (
NEW NODE: ID
[ 12]              ID: i
NEW NODE: RELOP
[ 12]           RELOP: <
NEW NODE: Exp
NEW NODE: ID
[ 12]              ID: j
NEW NODE: RP
[ 12]              RP: )
NEW NODE: Exp
NEW NODE: Exp
NEW NODE: LC
[ 12]              LC: {
NEW NODE: WHILE
[ 13]           WHILE: while
NEW NODE: DefList
NEW NODE: LP
[ 13]              LP: (
NEW NODE: ID
[ 13]              ID: i
NEW NODE: RELOP
[ 13]           RELOP: <
NEW NODE: Exp
NEW NODE: ID
[ 13]              ID: j
NEW NODE: RP
[ 13]              RP: )
NEW NODE: Exp
NEW NODE: Exp
NEW NODE: LC
[ 13]              LC: {
NEW NODE: WHILE
[ 14]           WHILE: while
NEW NODE: DefList
NEW NODE: LP
[ 14]              LP: (
NEW NODE: ID
[ 14]              ID: i
NEW NODE: RELOP
[ 14]           RELOP: <
NEW NODE: Exp
NEW NODE: ID
[ 14]              ID: j
NEW NODE: AND
[ 14]             AND: &&
NEW NODE: Exp
NEW NODE: Exp
NEW NODE: ID
[ 14]              ID: sequence
NEW NODE: LB
[ 14]              LB: [
NEW NODE: Exp
NEW NODE: ID
[ 14]              ID: j
NEW NODE: RB
[ 14]              RB: ]
NEW NODE: Exp
NEW NODE: Exp
NEW NODE: RELOP
[ 14]           RELOP: >
NEW NODE: ID
[ 14]              ID: x
NEW NODE: RP
[ 14]              RP: )
NEW NODE: Exp
NEW NODE: Exp
NEW NODE: Exp
NEW NODE: ID
[ 15]              ID: j
NEW NODE: ASSIGNOP
[ 15]        ASSIGNOP: =
NEW NODE: Exp
NEW NODE: ID
[ 15]              ID: j
NEW NODE: MINUS
[ 15]           MINUS: -
NEW NODE: Exp
NEW NODE: INT
[ 15]             INT: 1
NEW NODE: Exp
NEW NODE: SEMI
[ 15]            SEMI: ;
NEW NODE: Exp
NEW NODE: Exp
NEW NODE: Stmt
NEW NODE: Stmt
NEW NODE: IF
[ 16]              IF: if
NEW NODE: LP
[ 16]              LP: (
NEW NODE: ID
[ 16]              ID: i
NEW NODE: RELOP
[ 16]           RELOP: <
NEW NODE: Exp
NEW NODE: ID
[ 16]              ID: j
NEW NODE: RP
[ 16]              RP: )
NEW NODE: Exp
NEW NODE: Exp
NEW NODE: ID
[ 17]              ID: sequence
NEW NODE: LB
[ 17]              LB: [
NEW NODE: Exp
NEW NODE: ID
[ 17]              ID: i
NEW NODE: RB
[ 17]              RB: ]
NEW NODE: Exp
NEW NODE: Exp
NEW NODE: ASSIGNOP
[ 17]        ASSIGNOP: =
NEW NODE: ID
[ 17]              ID: sequence
NEW NODE: LB
[ 17]              LB: [
NEW NODE: Exp
NEW NODE: ID
[ 17]              ID: j
NEW NODE: RB
[ 17]              RB: ]
NEW NODE: Exp
NEW NODE: Exp
NEW NODE: SEMI
[ 17]            SEMI: ;
NEW NODE: Exp
NEW NODE: Stmt
NEW NODE: WHILE
[ 18]           WHILE: while
NEW NODE: Stmt
NEW NODE: LP
[ 18]              LP: (
NEW NODE: ID
[ 18]              ID: i
NEW NODE: RELOP
[ 18]           RELOP: <
NEW NODE: Exp
NEW NODE: ID
[ 18]              ID: j
NEW NODE: AND
[ 18]             AND: &&
NEW NODE: Exp
NEW NODE: Exp
NEW NODE: ID
[ 18]              ID: sequence
NEW NODE: LB
[ 18]              LB: [
NEW NODE: Exp
NEW NODE: ID
[ 18]              ID: i
NEW NODE: RB
[ 18]              RB: ]
NEW NODE: Exp
NEW NODE: Exp
NEW NODE: RELOP
[ 18]           RELOP: <=
NEW NODE: ID
[ 18]              ID: x
NEW NODE: RP
[ 18]              RP: )
NEW NODE: Exp
NEW NODE: Exp
NEW NODE: Exp
NEW NODE: ID
[ 19]              ID: i
NEW NODE: ASSIGNOP
[ 19]        ASSIGNOP: =
NEW NODE: Exp
NEW NODE: ID
[ 19]              ID: i
NEW NODE: PLUS
[ 19]            PLUS: +
NEW NODE: Exp
NEW NODE: INT
[ 19]             INT: 1
NEW NODE: Exp
NEW NODE: SEMI
[ 19]            SEMI: ;
NEW NODE: Exp
NEW NODE: Exp
NEW NODE: Stmt
NEW NODE: Stmt
NEW NODE: IF
[ 20]              IF: if
NEW NODE: LP
[ 20]              LP: (
NEW NODE: ID
[ 20]              ID: i
NEW NODE: RELOP
[ 20]           RELOP: <
NEW NODE: Exp
NEW NODE: ID
[ 20]              ID: j
NEW NODE: RP
[ 20]              RP: )
NEW NODE: Exp
NEW NODE: Exp
NEW NODE: ID
[ 21]              ID: sequence
NEW NODE: LB
[ 21]              LB: [
NEW NODE: Exp
NEW NODE: ID
[ 21]              ID: j
NEW NODE: RB
[ 21]              RB: ]
NEW NODE: Exp
NEW NODE: Exp
NEW NODE: ASSIGNOP
[ 21]        ASSIGNOP: =
NEW NODE: ID
[ 21]              ID: sequence
NEW NODE: LB
[ 21]              LB: [
NEW NODE: Exp
NEW NODE: ID
[ 21]              ID: i
NEW NODE: RB
[ 21]              RB: ]
NEW NODE: Exp
NEW NODE: Exp
NEW NODE: SEMI
[ 21]            SEMI: ;
NEW NODE: Exp
NEW NODE: Stmt
NEW NODE: RC
[ 22]              RC: }
NEW NODE: Stmt
NEW NODE: StmtList
NEW NODE: StmtList
NEW NODE: StmtList
NEW NODE: StmtList
NEW NODE: StmtList
NEW NODE: CompSt
NEW NODE: Stmt
NEW NODE: Stmt
NEW NODE: ID
[ 23]              ID: sequence
NEW NODE: LB
[ 23]              LB: [
NEW NODE: Exp
NEW NODE: ID
[ 23]              ID: i
NEW NODE: RB
[ 23]              RB: ]
NEW NODE: Exp
NEW NODE: Exp
NEW NODE: ASSIGNOP
[ 23]        ASSIGNOP: =
NEW NODE: ID
[ 23]              ID: x
NEW NODE: SEMI
[ 23]            SEMI: ;
NEW NODE: Exp
NEW NODE: Exp
NEW NODE: Stmt
NEW NODE: ID
[ 24]              ID: quickSort
NEW NODE: LP
[ 24]              LP: (
NEW NODE: ID
[ 24]              ID: start
NEW NODE: COMMA
[ 24]           COMMA: ,
NEW NODE: Exp
NEW NODE: ID
[ 24]              ID: i
NEW NODE: COMMA
[ 24]           COMMA: ,
NEW NODE: Exp
NEW NODE: MINUS
[ 24]           MINUS: -
NEW NODE: INT
[ 24]             INT: 1
NEW NODE: Exp
NEW NODE: RP
[ 24]              RP: )
NEW NODE: Exp
NEW NODE: Args
NEW NODE: Args
NEW NODE: Args
NEW NODE: Exp
NEW NODE: SEMI
[ 24]            SEMI: ;
NEW NODE: Stmt
NEW NODE: ID
[ 25]              ID: quickSort
NEW NODE: LP
[ 25]              LP: (
NEW NODE: ID
[ 25]              ID: i
NEW NODE: PLUS
[ 25]            PLUS: +
NEW NODE: Exp
NEW NODE: INT
[ 25]             INT: 1
NEW NODE: Exp
NEW NODE: COMMA
[ 25]           COMMA: ,
NEW NODE: Exp
NEW NODE: ID
[ 25]              ID: end
NEW NODE: RP
[ 25]              RP: )
NEW NODE: Exp
NEW NODE: Args
NEW NODE: Args
NEW NODE: Exp
NEW NODE: SEMI
[ 25]            SEMI: ;
NEW NODE: Stmt
NEW NODE: RC
[ 26]              RC: }
NEW NODE: StmtList
NEW NODE: StmtList
NEW NODE: StmtList
NEW NODE: StmtList
NEW NODE: StmtList
NEW NODE: CompSt
NEW NODE: Stmt
NEW NODE: RETURN
[ 27]          RETURN: return
NEW NODE: Stmt
NEW NODE: INT
[ 27]             INT: 1
NEW NODE: Exp
NEW NODE: SEMI
[ 27]            SEMI: ;
NEW NODE: Stmt
NEW NODE: RC
[ 28]              RC: }
NEW NODE: StmtList
NEW NODE: StmtList
NEW NODE: StmtList
NEW NODE: StmtList
NEW NODE: StmtList
NEW NODE: StmtList
NEW NODE: CompSt
NEW NODE: ExtDef
NEW NODE: TYPE
[ 30]            TYPE: int
NEW NODE: Specifier
NEW NODE: ID
[ 30]              ID: main
NEW NODE: LP
[ 30]              LP: (
NEW NODE: RP
[ 30]              RP: )
NEW NODE: FunDec
NEW NODE: LC
[ 30]              LC: {
NEW NODE: STRUCT
[ 31]          STRUCT: struct
NEW NODE: ID
[ 31]              ID: NotDefined
NEW NODE: ID
[ 31]              ID: test
NEW NODE: Tag
NEW NODE: StructSpecifier
NEW NODE: Specifier
NEW NODE: VarDec
NEW NODE: SEMI
[ 31]            SEMI: ;
NEW NODE: Dec
NEW NODE: DecList
NEW NODE: Def
NEW NODE: STRUCT
[ 32]          STRUCT: struct
NEW NODE: ID
[ 32]              ID: Defined
NEW NODE: ID
[ 32]              ID: ttt
NEW NODE: Tag
NEW NODE: StructSpecifier
NEW NODE: Specifier
NEW NODE: VarDec
NEW NODE: SEMI
[ 32]            SEMI: ;
NEW NODE: Dec
NEW NODE: DecList
NEW NODE: Def
NEW NODE: TYPE
[ 33]            TYPE: int
NEW NODE: Specifier
NEW NODE: ID
[ 33]              ID: q
NEW NODE: VarDec
NEW NODE: COMMA
[ 33]           COMMA: ,
NEW NODE: Dec
NEW NODE: ID
[ 33]              ID: p
NEW NODE: VarDec
NEW NODE: SEMI
[ 33]            SEMI: ;
NEW NODE: Dec
NEW NODE: DecList
NEW NODE: DecList
NEW NODE: Def
NEW NODE: ID
[ 34]              ID: q
NEW NODE: DefList
NEW NODE: DefList
NEW NODE: DefList
NEW NODE: DefList
NEW NODE: ASSIGNOP
[ 34]        ASSIGNOP: =
NEW NODE: Exp
NEW NODE: INT
[ 34]             INT: 0
NEW NODE: Exp
NEW NODE: SEMI
[ 34]            SEMI: ;
NEW NODE: Exp
NEW NODE: Stmt
NEW NODE: ID
[ 35]              ID: p
NEW NODE: ASSIGNOP
[ 35]        ASSIGNOP: =
NEW NODE: Exp
NEW NODE: INT
[ 35]             INT: 3
NEW NODE: Exp
NEW NODE: SEMI
[ 35]            SEMI: ;
NEW NODE: Exp
NEW NODE: Stmt
NEW NODE: ID
[ 36]              ID: ttt
NEW NODE: DOT
[ 36]             DOT: .
NEW NODE: Exp
NEW NODE: ID
[ 36]              ID: nme
NEW NODE: Exp
NEW NODE: ASSIGNOP
[ 36]        ASSIGNOP: =
NEW NODE: ID
[ 36]              ID: q
NEW NODE: SEMI
[ 36]            SEMI: ;
NEW NODE: Exp
NEW NODE: Exp
NEW NODE: Stmt
NEW NODE: WHILE
[ 37]           WHILE: while
NEW NODE: LP
[ 37]              LP: (
NEW NODE: ID
[ 37]              ID: q
NEW NODE: RELOP
[ 37]           RELOP: <
NEW NODE: Exp
NEW NODE: INT
[ 37]             INT: 1000
NEW NODE: Exp
NEW NODE: RP
[ 37]              RP: )
NEW NODE: Exp
NEW NODE: LC
[ 37]              LC: {
NEW NODE: ID
[ 38]              ID: sequence
NEW NODE: DefList
NEW NODE: LB
[ 38]              LB: [
NEW NODE: Exp
NEW NODE: ID
[ 38]              ID: q
NEW NODE: RB
[ 38]              RB: ]
NEW NODE: Exp
NEW NODE: Exp
NEW NODE: ASSIGNOP
[ 38]        ASSIGNOP: =
NEW NODE: ID
[ 38]              ID: p
NEW NODE: STAR
[ 38]            STAR: *
NEW NODE: Exp
NEW NODE: INT
[ 38]             INT: 3
NEW NODE: Exp
NEW NODE: SEMI
[ 38]            SEMI: ;
NEW NODE: Exp
NEW NODE: Exp
NEW NODE: Stmt
NEW NODE: ID
[ 39]              ID: p
NEW NODE: ASSIGNOP
[ 39]        ASSIGNOP: =
NEW NODE: Exp
NEW NODE: ID
[ 39]              ID: p
NEW NODE: MINUS
[ 39]           MINUS: -
NEW NODE: Exp
NEW NODE: ID
[ 39]              ID: q
NEW NODE: SEMI
[ 39]            SEMI: ;
NEW NODE: Exp
NEW NODE: Exp
NEW NODE: Exp
NEW NODE: Stmt
NEW NODE: ID
[ 40]              ID: q
NEW NODE: ASSIGNOP
[ 40]        ASSIGNOP: =
NEW NODE: Exp
NEW NODE: ID
[ 40]              ID: q
NEW NODE: PLUS
[ 40]            PLUS: +
NEW NODE: Exp
NEW NODE: INT
[ 40]             INT: 1
NEW NODE: Exp
NEW NODE: SEMI
[ 40]            SEMI: ;
NEW NODE: Exp
NEW NODE: Exp
NEW NODE: Stmt
NEW NODE: RC
[ 41]              RC: }
NEW NODE: StmtList
NEW NODE: StmtList
NEW NODE: StmtList
NEW NODE: StmtList
NEW NODE: CompSt
NEW NODE: Stmt
NEW NODE: Stmt
NEW NODE: ID
[ 42]              ID: quickSort
NEW NODE: LP
[ 42]              LP: (
NEW NODE: INT
[ 42]             INT: 0
NEW NODE: Exp
NEW NODE: COMMA
[ 42]           COMMA: ,
NEW NODE: INT
[ 42]             INT: 999
NEW NODE: Exp
NEW NODE: RP
[ 42]              RP: )
NEW NODE: Args
NEW NODE: Args
NEW NODE: Exp
NEW NODE: SEMI
[ 42]            SEMI: ;
NEW NODE: Stmt
NEW NODE: ID
[ 43]              ID: q
NEW NODE: LP
[ 43]              LP: (
NEW NODE: INT
[ 43]             INT: 0
NEW NODE: Exp
NEW NODE: COMMA
[ 43]           COMMA: ,
NEW NODE: INT
[ 43]             INT: 999
NEW NODE: Exp
NEW NODE: RP
[ 43]              RP: )
NEW NODE: Args
NEW NODE: Args
NEW NODE: Exp
NEW NODE: SEMI
[ 43]            SEMI: ;
NEW NODE: Stmt
NEW NODE: RETURN
[ 44]          RETURN: return
NEW NODE: ID
[ 44]              ID: q
NEW NODE: SEMI
[ 44]            SEMI: ;
NEW NODE: Exp
NEW NODE: Stmt
NEW NODE: RC
[ 45]              RC: }
NEW NODE: StmtList
NEW NODE: StmtList
NEW NODE: StmtList
NEW NODE: StmtList
NEW NODE: StmtList
NEW NODE: StmtList
NEW NODE: StmtList
NEW NODE: StmtList
NEW NODE: CompSt
NEW NODE: ExtDef
NEW NODE: ExtDefList
NEW NODE: ExtDefList
NEW NODE: ExtDefList
NEW NODE: ExtDefList
NEW NODE: ExtDefList
NEW NODE: Program
Miss 0 Syntax Error.
IN SEMANTIC ANALYSIS
[DEBUG] Finish Analysing OptTag.
Search for Insert: name: name, ns: Field
[DEBUG] Finish Analysing VarDec4Field.
[DEBUG] Finish Analysing Dec4Field.
[DEBUG] Finish Analysing DecList4Field.
[DEBUG] Finish Analysing Def4Field.
Search for Insert: name: ty, ns: Field
[DEBUG] Finish Analysing VarDec4Field.
[DEBUG] Finish Analysing Dec4Field.
[DEBUG] Finish Analysing DecList4Field.
[DEBUG] Finish Analysing Def4Field.
[DEBUG] Finish Analysing DefList4Field.
[DEBUG] Finish Analysing DefList4Field.
[DEBUG] Finish Analysing DefList4Field.
Search for Insert: name: Defined, ns: 1
Insert Symbol: name: Defined
------------------------------
stack 0:
	name: Defined, src: STRUCT
------------------------------
[DEBUG] Finish Analysing StructSpecifier.
[DEBUG] Finish Analysing Specifier.
[DEBUG] Finish Analysing ExtDef.
Search for Insert: name: sequence, ns: 2
Insert Symbol: name: sequence
------------------------------
stack 0:
	name: sequence, src: GVAR
	name: Defined, src: STRUCT
------------------------------
[DEBUG] Finish Analysing VarDec4Var.
[DEBUG] Finish Analysing VarDec4Var.
[DEBUG] Finish Analysing ExtDecList.
[DEBUG] Finish Analysing ExtDef.
Search for Insert: name: start, ns: 3
Insert Symbol: name: start
------------------------------
stack 1:
	name: start, src: LVAR
stack 0:
	name: sequence, src: GVAR
	name: Defined, src: STRUCT
------------------------------
[DEBUG] Finish Analysing VarDec4Param.
[DEBUG] Finish Analysing ParamDec.
Search for Insert: name: end, ns: 3
Insert Symbol: name: end
------------------------------
stack 1:
	name: end, src: LVAR
	name: start, src: LVAR
stack 0:
	name: sequence, src: GVAR
	name: Defined, src: STRUCT
------------------------------
[DEBUG] Finish Analysing VarDec4Param.
[DEBUG] Finish Analysing ParamDec.
[DEBUG] Finish Analysing VarList.
[DEBUG] Finish Analysing VarList.
[DEBUG] Finish Analysing FunDec.
Search for Insert: name: quickSort, ns: 0
Insert Symbol: name: quickSort
------------------------------
stack 1:
	name: end, src: LVAR
	name: start, src: LVAR
stack 0:
	name: quickSort, src: FUNC
	name: sequence, src: GVAR
	name: Defined, src: STRUCT
------------------------------
Search for Insert: name: i, ns: 3
Insert Symbol: name: i
------------------------------
stack 1:
	name: i, src: LVAR
	name: end, src: LVAR
	name: start, src: LVAR
stack 0:
	name: quickSort, src: FUNC
	name: sequence, src: GVAR
	name: Defined, src: STRUCT
------------------------------
[DEBUG] Finish Analysing VarDec4Var.
[DEBUG] Finish Analysing Dec4LocalVar.
Search for Insert: name: j, ns: 3
Insert Symbol: name: j
------------------------------
stack 1:
	name: j, src: LVAR
	name: i, src: LVAR
	name: end, src: LVAR
	name: start, src: LVAR
stack 0:
	name: quickSort, src: FUNC
	name: sequence, src: GVAR
	name: Defined, src: STRUCT
------------------------------
[DEBUG] Finish Analysing VarDec4Var.
[DEBUG] Finish Analysing Dec4LocalVar.
Search for Insert: name: x, ns: 3
Insert Symbol: name: x
------------------------------
stack 1:
	name: x, src: LVAR
	name: j, src: LVAR
	name: i, src: LVAR
	name: end, src: LVAR
	name: start, src: LVAR
stack 0:
	name: quickSort, src: FUNC
	name: sequence, src: GVAR
	name: Defined, src: STRUCT
------------------------------
[DEBUG] Finish Analysing VarDec4Var.
[DEBUG] Finish Analysing Dec4LocalVar.
[DEBUG] Finish Analysing DecList4LocalVar.
[DEBUG] Finish Analysing DecList4LocalVar.
[DEBUG] Finish Analysing DecList4LocalVar.
[DEBUG] Finish Analysing Def4LocalVar.
[DEBUG] Finish Analysing DefList4LocalVar.
[DEBUG] Finish Analysing DefList4LocalVar.
Search for Use: name: i, ns: 3
[DEBUG] Finish Analysing Exp.
Search for Use: name: start, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Stmt.
Search for Use: name: j, ns: 3
[DEBUG] Finish Analysing Exp.
Search for Use: name: end, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Stmt.
Search for Use: name: x, ns: 3
[DEBUG] Finish Analysing Exp.
Search for Use: name: sequence, ns: 3
Search for Use: name: sequence, ns: 2
[DEBUG] Finish Analysing Exp.
Search for Use: name: i, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Stmt.
Search for Use: name: i, ns: 3
[DEBUG] Finish Analysing Exp.
Search for Use: name: j, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing DefList4LocalVar.
Search for Use: name: i, ns: 3
[DEBUG] Finish Analysing Exp.
Search for Use: name: j, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing DefList4LocalVar.
Search for Use: name: i, ns: 3
[DEBUG] Finish Analysing Exp.
Search for Use: name: j, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
Search for Use: name: sequence, ns: 3
Search for Use: name: sequence, ns: 2
[DEBUG] Finish Analysing Exp.
Search for Use: name: j, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
Search for Use: name: x, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
Search for Use: name: j, ns: 3
[DEBUG] Finish Analysing Exp.
Search for Use: name: j, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Stmt.
[DEBUG] Finish Analysing Stmt.
Search for Use: name: i, ns: 3
[DEBUG] Finish Analysing Exp.
Search for Use: name: j, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
Search for Use: name: sequence, ns: 3
Search for Use: name: sequence, ns: 2
[DEBUG] Finish Analysing Exp.
Search for Use: name: i, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
Search for Use: name: sequence, ns: 3
Search for Use: name: sequence, ns: 2
[DEBUG] Finish Analysing Exp.
Search for Use: name: j, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Stmt.
[DEBUG] Finish Analysing Stmt.
Search for Use: name: i, ns: 3
[DEBUG] Finish Analysing Exp.
Search for Use: name: j, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
Search for Use: name: sequence, ns: 3
Search for Use: name: sequence, ns: 2
[DEBUG] Finish Analysing Exp.
Search for Use: name: i, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
Search for Use: name: x, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
Search for Use: name: i, ns: 3
[DEBUG] Finish Analysing Exp.
Search for Use: name: i, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Stmt.
[DEBUG] Finish Analysing Stmt.
Search for Use: name: i, ns: 3
[DEBUG] Finish Analysing Exp.
Search for Use: name: j, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
Search for Use: name: sequence, ns: 3
Search for Use: name: sequence, ns: 2
[DEBUG] Finish Analysing Exp.
Search for Use: name: j, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
Search for Use: name: sequence, ns: 3
Search for Use: name: sequence, ns: 2
[DEBUG] Finish Analysing Exp.
Search for Use: name: i, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Stmt.
[DEBUG] Finish Analysing Stmt.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing CompSt.
Clear Stack Top
------------------------------
stack 3:
stack 2:
stack 1:
	name: x, src: LVAR
	name: j, src: LVAR
	name: i, src: LVAR
	name: end, src: LVAR
	name: start, src: LVAR
stack 0:
	name: quickSort, src: FUNC
	name: sequence, src: GVAR
	name: Defined, src: STRUCT
------------------------------
[DEBUG] Finish Analysing Stmt.
[DEBUG] Finish Analysing Stmt.
Search for Use: name: sequence, ns: 3
Search for Use: name: sequence, ns: 2
[DEBUG] Finish Analysing Exp.
Search for Use: name: i, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
Search for Use: name: x, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Stmt.
Search for Use: name: quickSort, ns: 0
Search for Use: name: start, ns: 3
[DEBUG] Finish Analysing Exp.
Search for Use: name: i, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Args.
[DEBUG] Finish Analysing Args.
[DEBUG] Finish Analysing Args.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Stmt.
Search for Use: name: quickSort, ns: 0
Search for Use: name: i, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
Search for Use: name: end, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Args.
[DEBUG] Finish Analysing Args.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Stmt.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing CompSt.
Clear Stack Top
------------------------------
stack 2:
stack 1:
	name: x, src: LVAR
	name: j, src: LVAR
	name: i, src: LVAR
	name: end, src: LVAR
	name: start, src: LVAR
stack 0:
	name: quickSort, src: FUNC
	name: sequence, src: GVAR
	name: Defined, src: STRUCT
------------------------------
[DEBUG] Finish Analysing Stmt.
[DEBUG] Finish Analysing Stmt.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Stmt.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing CompSt.
Clear Stack Top
------------------------------
stack 1:
stack 0:
	name: quickSort, src: FUNC
	name: sequence, src: GVAR
	name: Defined, src: STRUCT
------------------------------
[DEBUG] Finish Analysing ExtDef.
[DEBUG] Finish Analysing FunDec.
Search for Insert: name: main, ns: 0
Insert Symbol: name: main
------------------------------
stack 1:
stack 0:
	name: main, src: FUNC
	name: quickSort, src: FUNC
	name: sequence, src: GVAR
	name: Defined, src: STRUCT
------------------------------
[DEBUG] Finish Analysing StructSpecifier.
Search for Use: name: NotDefined, ns: 1
[DEBUG] Finish Analysing Specifier.
Search for Insert: name: test, ns: 3
Insert Symbol: name: test
------------------------------
stack 1:
	name: test, src: LVAR
stack 0:
	name: main, src: FUNC
	name: quickSort, src: FUNC
	name: sequence, src: GVAR
	name: Defined, src: STRUCT
------------------------------
[DEBUG] Finish Analysing VarDec4Var.
[DEBUG] Finish Analysing Dec4LocalVar.
[DEBUG] Finish Analysing DecList4LocalVar.
[DEBUG] Finish Analysing Def4LocalVar.
[DEBUG] Finish Analysing StructSpecifier.
Search for Use: name: Defined, ns: 1
[DEBUG] Finish Analysing Specifier.
Search for Insert: name: ttt, ns: 3
Insert Symbol: name: ttt
------------------------------
stack 1:
	name: ttt, src: LVAR
	name: test, src: LVAR
stack 0:
	name: main, src: FUNC
	name: quickSort, src: FUNC
	name: sequence, src: GVAR
	name: Defined, src: STRUCT
------------------------------
[DEBUG] Finish Analysing VarDec4Var.
[DEBUG] Finish Analysing Dec4LocalVar.
[DEBUG] Finish Analysing DecList4LocalVar.
[DEBUG] Finish Analysing Def4LocalVar.
Search for Insert: name: q, ns: 3
Insert Symbol: name: q
------------------------------
stack 1:
	name: q, src: LVAR
	name: ttt, src: LVAR
	name: test, src: LVAR
stack 0:
	name: main, src: FUNC
	name: quickSort, src: FUNC
	name: sequence, src: GVAR
	name: Defined, src: STRUCT
------------------------------
[DEBUG] Finish Analysing VarDec4Var.
[DEBUG] Finish Analysing Dec4LocalVar.
Search for Insert: name: p, ns: 3
Insert Symbol: name: p
------------------------------
stack 1:
	name: p, src: LVAR
	name: q, src: LVAR
	name: ttt, src: LVAR
	name: test, src: LVAR
stack 0:
	name: main, src: FUNC
	name: quickSort, src: FUNC
	name: sequence, src: GVAR
	name: Defined, src: STRUCT
------------------------------
[DEBUG] Finish Analysing VarDec4Var.
[DEBUG] Finish Analysing Dec4LocalVar.
[DEBUG] Finish Analysing DecList4LocalVar.
[DEBUG] Finish Analysing DecList4LocalVar.
[DEBUG] Finish Analysing Def4LocalVar.
[DEBUG] Finish Analysing DefList4LocalVar.
[DEBUG] Finish Analysing DefList4LocalVar.
[DEBUG] Finish Analysing DefList4LocalVar.
[DEBUG] Finish Analysing DefList4LocalVar.
Search for Use: name: q, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Stmt.
Search for Use: name: p, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Stmt.
Search for Use: name: nme, ns: Field
Search for Use: name: ttt, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
Search for Use: name: q, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Stmt.
Search for Use: name: q, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing DefList4LocalVar.
Search for Use: name: sequence, ns: 3
Search for Use: name: sequence, ns: 2
[DEBUG] Finish Analysing Exp.
Search for Use: name: q, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
Search for Use: name: p, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Stmt.
Search for Use: name: p, ns: 3
[DEBUG] Finish Analysing Exp.
Search for Use: name: p, ns: 3
[DEBUG] Finish Analysing Exp.
Search for Use: name: q, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Stmt.
Search for Use: name: q, ns: 3
[DEBUG] Finish Analysing Exp.
Search for Use: name: q, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Stmt.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing CompSt.
Clear Stack Top
------------------------------
stack 2:
stack 1:
	name: p, src: LVAR
	name: q, src: LVAR
	name: ttt, src: LVAR
	name: test, src: LVAR
stack 0:
	name: main, src: FUNC
	name: quickSort, src: FUNC
	name: sequence, src: GVAR
	name: Defined, src: STRUCT
------------------------------
[DEBUG] Finish Analysing Stmt.
[DEBUG] Finish Analysing Stmt.
Search for Use: name: quickSort, ns: 0
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Args.
[DEBUG] Finish Analysing Args.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Stmt.
Search for Use: name: q, ns: 0
Search for Use: name: q, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Stmt.
Search for Use: name: q, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Stmt.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing CompSt.
Clear Stack Top
------------------------------
stack 1:
stack 0:
	name: main, src: FUNC
	name: quickSort, src: FUNC
	name: sequence, src: GVAR
	name: Defined, src: STRUCT
------------------------------
[DEBUG] Finish Analysing ExtDef.
[DEBUG] Finish Analysing ExtDefList.
[DEBUG] Finish Analysing ExtDefList.
[DEBUG] Finish Analysing ExtDefList.
[DEBUG] Finish Analysing ExtDefList.
[DEBUG] Finish Analysing ExtDefList.
[DEBUG] Finish Analysing Program.
