NEW NODE: TYPE
[  1]            TYPE: int
NEW NODE: Specifier
NEW NODE: ID
[  1]              ID: sequences
NEW NODE: LB
[  1]              LB: [
NEW NODE: VarDec
NEW NODE: INT
[  1]             INT: 100
NEW NODE: RB
[  1]              RB: ]
NEW NODE: VarDec
NEW NODE: LB
[  1]              LB: [
NEW NODE: INT
[  1]             INT: 100
NEW NODE: RB
[  1]              RB: ]
NEW NODE: VarDec
NEW NODE: SEMI
[  1]            SEMI: ;
NEW NODE: ExtDecList
NEW NODE: ExtDef
NEW NODE: TYPE
[  3]            TYPE: int
NEW NODE: Specifier
NEW NODE: ID
[  3]              ID: addEach
NEW NODE: LP
[  3]              LP: (
NEW NODE: TYPE
[  3]            TYPE: int
NEW NODE: Specifier
NEW NODE: ID
[  3]              ID: p
NEW NODE: VarDec
NEW NODE: RP
[  3]              RP: )
NEW NODE: ParamDec
NEW NODE: VarList
NEW NODE: FunDec
NEW NODE: LC
[  3]              LC: {
NEW NODE: TYPE
[  4]            TYPE: int
NEW NODE: Specifier
NEW NODE: ID
[  4]              ID: i
NEW NODE: VarDec
NEW NODE: COMMA
[  4]           COMMA: ,
NEW NODE: Dec
NEW NODE: ID
[  4]              ID: j
NEW NODE: VarDec
NEW NODE: SEMI
[  4]            SEMI: ;
NEW NODE: Dec
NEW NODE: DecList
NEW NODE: DecList
NEW NODE: Def
NEW NODE: ID
[  5]              ID: i
NEW NODE: DefList
NEW NODE: DefList
NEW NODE: ASSIGNOP
[  5]        ASSIGNOP: =
NEW NODE: Exp
NEW NODE: INT
[  5]             INT: 0
NEW NODE: Exp
NEW NODE: SEMI
[  5]            SEMI: ;
NEW NODE: Exp
NEW NODE: Stmt
NEW NODE: ID
[  6]              ID: j
NEW NODE: ASSIGNOP
[  6]        ASSIGNOP: =
NEW NODE: Exp
NEW NODE: INT
[  6]             INT: 0
NEW NODE: Exp
NEW NODE: SEMI
[  6]            SEMI: ;
NEW NODE: Exp
NEW NODE: Stmt
NEW NODE: WHILE
[  7]           WHILE: while
NEW NODE: LP
[  7]              LP: (
NEW NODE: ID
[  7]              ID: i
NEW NODE: RELOP
[  7]           RELOP: <
NEW NODE: Exp
NEW NODE: INT
[  7]             INT: 100
NEW NODE: Exp
NEW NODE: RP
[  7]              RP: )
NEW NODE: Exp
NEW NODE: LC
[  7]              LC: {
NEW NODE: WHILE
[  8]           WHILE: while
NEW NODE: DefList
NEW NODE: LP
[  8]              LP: (
NEW NODE: ID
[  8]              ID: j
NEW NODE: RELOP
[  8]           RELOP: <
NEW NODE: Exp
NEW NODE: INT
[  8]             INT: 100
NEW NODE: Exp
NEW NODE: RP
[  8]              RP: )
NEW NODE: Exp
NEW NODE: LC
[  8]              LC: {
NEW NODE: ID
[  9]              ID: sequences
NEW NODE: DefList
NEW NODE: LB
[  9]              LB: [
NEW NODE: Exp
NEW NODE: ID
[  9]              ID: i
NEW NODE: RB
[  9]              RB: ]
NEW NODE: Exp
NEW NODE: Exp
NEW NODE: LB
[  9]              LB: [
NEW NODE: ID
[  9]              ID: j
NEW NODE: RB
[  9]              RB: ]
NEW NODE: Exp
NEW NODE: Exp
NEW NODE: ASSIGNOP
[  9]        ASSIGNOP: =
NEW NODE: ID
[  9]              ID: sequences
NEW NODE: LB
[  9]              LB: [
NEW NODE: Exp
NEW NODE: ID
[  9]              ID: i
NEW NODE: RB
[  9]              RB: ]
NEW NODE: Exp
NEW NODE: Exp
NEW NODE: LB
[  9]              LB: [
NEW NODE: ID
[  9]              ID: j
NEW NODE: RB
[  9]              RB: ]
NEW NODE: Exp
NEW NODE: Exp
NEW NODE: PLUS
[  9]            PLUS: +
NEW NODE: ID
[  9]              ID: p
NEW NODE: SEMI
[  9]            SEMI: ;
NEW NODE: Exp
NEW NODE: Exp
NEW NODE: Exp
NEW NODE: Stmt
NEW NODE: ID
[ 10]              ID: j
NEW NODE: ASSIGNOP
[ 10]        ASSIGNOP: =
NEW NODE: Exp
NEW NODE: ID
[ 10]              ID: j
NEW NODE: PLUS
[ 10]            PLUS: +
NEW NODE: Exp
NEW NODE: INT
[ 10]             INT: 1
NEW NODE: Exp
NEW NODE: SEMI
[ 10]            SEMI: ;
NEW NODE: Exp
NEW NODE: Exp
NEW NODE: Stmt
NEW NODE: RC
[ 11]              RC: }
NEW NODE: StmtList
NEW NODE: StmtList
NEW NODE: StmtList
NEW NODE: CompSt
NEW NODE: Stmt
NEW NODE: Stmt
NEW NODE: ID
[ 12]              ID: i
NEW NODE: ASSIGNOP
[ 12]        ASSIGNOP: =
NEW NODE: Exp
NEW NODE: ID
[ 12]              ID: i
NEW NODE: PLUS
[ 12]            PLUS: +
NEW NODE: Exp
NEW NODE: INT
[ 12]             INT: 1
NEW NODE: Exp
NEW NODE: SEMI
[ 12]            SEMI: ;
NEW NODE: Exp
NEW NODE: Exp
NEW NODE: Stmt
NEW NODE: RC
[ 13]              RC: }
NEW NODE: StmtList
NEW NODE: StmtList
NEW NODE: StmtList
NEW NODE: CompSt
NEW NODE: Stmt
NEW NODE: Stmt
NEW NODE: RETURN
[ 14]          RETURN: return
NEW NODE: ID
[ 14]              ID: p
NEW NODE: SEMI
[ 14]            SEMI: ;
NEW NODE: Exp
NEW NODE: Stmt
NEW NODE: RC
[ 15]              RC: }
NEW NODE: StmtList
NEW NODE: StmtList
NEW NODE: StmtList
NEW NODE: StmtList
NEW NODE: StmtList
NEW NODE: CompSt
NEW NODE: ExtDef
NEW NODE: TYPE
[ 16]            TYPE: int
NEW NODE: Specifier
NEW NODE: ID
[ 16]              ID: mulEach
NEW NODE: LP
[ 16]              LP: (
NEW NODE: TYPE
[ 16]            TYPE: int
NEW NODE: Specifier
NEW NODE: ID
[ 16]              ID: p
NEW NODE: VarDec
NEW NODE: RP
[ 16]              RP: )
NEW NODE: ParamDec
NEW NODE: VarList
NEW NODE: FunDec
NEW NODE: LC
[ 16]              LC: {
NEW NODE: TYPE
[ 17]            TYPE: int
NEW NODE: Specifier
NEW NODE: ID
[ 17]              ID: i
NEW NODE: VarDec
NEW NODE: COMMA
[ 17]           COMMA: ,
NEW NODE: Dec
NEW NODE: ID
[ 17]              ID: j
NEW NODE: VarDec
NEW NODE: SEMI
[ 17]            SEMI: ;
NEW NODE: Dec
NEW NODE: DecList
NEW NODE: DecList
NEW NODE: Def
NEW NODE: ID
[ 18]              ID: i
NEW NODE: DefList
NEW NODE: DefList
NEW NODE: ASSIGNOP
[ 18]        ASSIGNOP: =
NEW NODE: Exp
NEW NODE: INT
[ 18]             INT: 0
NEW NODE: Exp
NEW NODE: SEMI
[ 18]            SEMI: ;
NEW NODE: Exp
NEW NODE: Stmt
NEW NODE: ID
[ 19]              ID: j
NEW NODE: ASSIGNOP
[ 19]        ASSIGNOP: =
NEW NODE: Exp
NEW NODE: INT
[ 19]             INT: 0
NEW NODE: Exp
NEW NODE: SEMI
[ 19]            SEMI: ;
NEW NODE: Exp
NEW NODE: Stmt
NEW NODE: WHILE
[ 20]           WHILE: while
NEW NODE: LP
[ 20]              LP: (
NEW NODE: ID
[ 20]              ID: i
NEW NODE: RELOP
[ 20]           RELOP: <
NEW NODE: Exp
NEW NODE: INT
[ 20]             INT: 100
NEW NODE: Exp
NEW NODE: RP
[ 20]              RP: )
NEW NODE: Exp
NEW NODE: LC
[ 20]              LC: {
NEW NODE: WHILE
[ 21]           WHILE: while
NEW NODE: DefList
NEW NODE: LP
[ 21]              LP: (
NEW NODE: ID
[ 21]              ID: j
NEW NODE: RELOP
[ 21]           RELOP: <
NEW NODE: Exp
NEW NODE: INT
[ 21]             INT: 100
NEW NODE: Exp
NEW NODE: RP
[ 21]              RP: )
NEW NODE: Exp
NEW NODE: LC
[ 21]              LC: {
NEW NODE: ID
[ 22]              ID: sequences
NEW NODE: DefList
NEW NODE: LB
[ 22]              LB: [
NEW NODE: Exp
NEW NODE: ID
[ 22]              ID: i
NEW NODE: RB
[ 22]              RB: ]
NEW NODE: Exp
NEW NODE: Exp
NEW NODE: LB
[ 22]              LB: [
NEW NODE: ID
[ 22]              ID: j
NEW NODE: RB
[ 22]              RB: ]
NEW NODE: Exp
NEW NODE: Exp
NEW NODE: ASSIGNOP
[ 22]        ASSIGNOP: =
NEW NODE: ID
[ 22]              ID: sequences
NEW NODE: LB
[ 22]              LB: [
NEW NODE: Exp
NEW NODE: ID
[ 22]              ID: i
NEW NODE: RB
[ 22]              RB: ]
NEW NODE: Exp
NEW NODE: Exp
NEW NODE: LB
[ 22]              LB: [
NEW NODE: ID
[ 22]              ID: j
NEW NODE: RB
[ 22]              RB: ]
NEW NODE: Exp
NEW NODE: Exp
NEW NODE: STAR
[ 22]            STAR: *
NEW NODE: ID
[ 22]              ID: p
NEW NODE: SEMI
[ 22]            SEMI: ;
NEW NODE: Exp
NEW NODE: Exp
NEW NODE: Exp
NEW NODE: Stmt
NEW NODE: ID
[ 23]              ID: j
NEW NODE: ASSIGNOP
[ 23]        ASSIGNOP: =
NEW NODE: Exp
NEW NODE: ID
[ 23]              ID: j
NEW NODE: PLUS
[ 23]            PLUS: +
NEW NODE: Exp
NEW NODE: INT
[ 23]             INT: 1
NEW NODE: Exp
NEW NODE: SEMI
[ 23]            SEMI: ;
NEW NODE: Exp
NEW NODE: Exp
NEW NODE: Stmt
NEW NODE: RC
[ 24]              RC: }
NEW NODE: StmtList
NEW NODE: StmtList
NEW NODE: StmtList
NEW NODE: CompSt
NEW NODE: Stmt
NEW NODE: Stmt
NEW NODE: ID
[ 25]              ID: i
NEW NODE: ASSIGNOP
[ 25]        ASSIGNOP: =
NEW NODE: Exp
NEW NODE: ID
[ 25]              ID: i
NEW NODE: PLUS
[ 25]            PLUS: +
NEW NODE: Exp
NEW NODE: INT
[ 25]             INT: 1
NEW NODE: Exp
NEW NODE: SEMI
[ 25]            SEMI: ;
NEW NODE: Exp
NEW NODE: Exp
NEW NODE: Stmt
NEW NODE: RC
[ 26]              RC: }
NEW NODE: StmtList
NEW NODE: StmtList
NEW NODE: StmtList
NEW NODE: CompSt
NEW NODE: Stmt
NEW NODE: Stmt
NEW NODE: RETURN
[ 27]          RETURN: return
NEW NODE: ID
[ 27]              ID: p
NEW NODE: SEMI
[ 27]            SEMI: ;
NEW NODE: Exp
NEW NODE: Stmt
NEW NODE: RC
[ 29]              RC: }
NEW NODE: StmtList
NEW NODE: StmtList
NEW NODE: StmtList
NEW NODE: StmtList
NEW NODE: StmtList
NEW NODE: CompSt
NEW NODE: ExtDef
NEW NODE: TYPE
[ 31]            TYPE: int
NEW NODE: Specifier
NEW NODE: ID
[ 31]              ID: main
NEW NODE: LP
[ 31]              LP: (
NEW NODE: RP
[ 31]              RP: )
NEW NODE: FunDec
NEW NODE: LC
[ 31]              LC: {
NEW NODE: TYPE
[ 32]            TYPE: int
NEW NODE: Specifier
NEW NODE: ID
[ 32]              ID: i
NEW NODE: VarDec
NEW NODE: COMMA
[ 32]           COMMA: ,
NEW NODE: Dec
NEW NODE: ID
[ 32]              ID: j
NEW NODE: VarDec
NEW NODE: SEMI
[ 32]            SEMI: ;
NEW NODE: Dec
NEW NODE: DecList
NEW NODE: DecList
NEW NODE: Def
NEW NODE: ID
[ 33]              ID: i
NEW NODE: DefList
NEW NODE: DefList
NEW NODE: ASSIGNOP
[ 33]        ASSIGNOP: =
NEW NODE: Exp
NEW NODE: INT
[ 33]             INT: 0
NEW NODE: Exp
NEW NODE: SEMI
[ 33]            SEMI: ;
NEW NODE: Exp
NEW NODE: Stmt
NEW NODE: ID
[ 34]              ID: j
NEW NODE: ASSIGNOP
[ 34]        ASSIGNOP: =
NEW NODE: Exp
NEW NODE: INT
[ 34]             INT: 0
NEW NODE: Exp
NEW NODE: SEMI
[ 34]            SEMI: ;
NEW NODE: Exp
NEW NODE: Stmt
NEW NODE: WHILE
[ 35]           WHILE: while
NEW NODE: LP
[ 35]              LP: (
NEW NODE: ID
[ 35]              ID: i
NEW NODE: RELOP
[ 35]           RELOP: <
NEW NODE: Exp
NEW NODE: INT
[ 35]             INT: 100
NEW NODE: Exp
NEW NODE: RP
[ 35]              RP: )
NEW NODE: Exp
NEW NODE: LC
[ 35]              LC: {
NEW NODE: WHILE
[ 36]           WHILE: while
NEW NODE: DefList
NEW NODE: LP
[ 36]              LP: (
NEW NODE: ID
[ 36]              ID: j
NEW NODE: RELOP
[ 36]           RELOP: <
NEW NODE: Exp
NEW NODE: INT
[ 36]             INT: 100
NEW NODE: Exp
NEW NODE: RP
[ 36]              RP: )
NEW NODE: Exp
NEW NODE: LC
[ 36]              LC: {
NEW NODE: ID
[ 37]              ID: sequences
NEW NODE: DefList
NEW NODE: LB
[ 37]              LB: [
NEW NODE: Exp
NEW NODE: ID
[ 37]              ID: i
NEW NODE: RB
[ 37]              RB: ]
NEW NODE: Exp
NEW NODE: Exp
NEW NODE: LB
[ 37]              LB: [
NEW NODE: ID
[ 37]              ID: j
NEW NODE: RB
[ 37]              RB: ]
NEW NODE: Exp
NEW NODE: Exp
NEW NODE: ASSIGNOP
[ 37]        ASSIGNOP: =
NEW NODE: ID
[ 37]              ID: i
NEW NODE: STAR
[ 37]            STAR: *
NEW NODE: Exp
NEW NODE: ID
[ 37]              ID: j
NEW NODE: SEMI
[ 37]            SEMI: ;
NEW NODE: Exp
NEW NODE: Exp
NEW NODE: Exp
NEW NODE: Stmt
NEW NODE: ID
[ 38]              ID: j
NEW NODE: ASSIGNOP
[ 38]        ASSIGNOP: =
NEW NODE: Exp
NEW NODE: ID
[ 38]              ID: j
NEW NODE: PLUS
[ 38]            PLUS: +
NEW NODE: Exp
NEW NODE: INT
[ 38]             INT: 1
NEW NODE: Exp
NEW NODE: SEMI
[ 38]            SEMI: ;
NEW NODE: Exp
NEW NODE: Exp
NEW NODE: Stmt
NEW NODE: RC
[ 39]              RC: }
NEW NODE: StmtList
NEW NODE: StmtList
NEW NODE: StmtList
NEW NODE: CompSt
NEW NODE: Stmt
NEW NODE: Stmt
NEW NODE: ID
[ 40]              ID: i
NEW NODE: ASSIGNOP
[ 40]        ASSIGNOP: =
NEW NODE: Exp
NEW NODE: ID
[ 40]              ID: i
NEW NODE: PLUS
[ 40]            PLUS: +
NEW NODE: Exp
NEW NODE: INT
[ 40]             INT: 1
NEW NODE: Exp
NEW NODE: SEMI
[ 40]            SEMI: ;
NEW NODE: Exp
NEW NODE: Exp
NEW NODE: Stmt
NEW NODE: RC
[ 41]              RC: }
NEW NODE: StmtList
NEW NODE: StmtList
NEW NODE: StmtList
NEW NODE: CompSt
NEW NODE: Stmt
NEW NODE: Stmt
NEW NODE: ID
[ 42]              ID: addEach
NEW NODE: LP
[ 42]              LP: (
NEW NODE: ID
[ 42]              ID: i
NEW NODE: PLUS
[ 42]            PLUS: +
NEW NODE: Exp
NEW NODE: INT
[ 42]             INT: 3
NEW NODE: Exp
NEW NODE: RP
[ 42]              RP: )
NEW NODE: Exp
NEW NODE: Args
NEW NODE: Exp
NEW NODE: SEMI
[ 42]            SEMI: ;
NEW NODE: Stmt
NEW NODE: ID
[ 43]              ID: mulEach
NEW NODE: LP
[ 43]              LP: (
NEW NODE: ID
[ 43]              ID: j
NEW NODE: MINUS
[ 43]           MINUS: -
NEW NODE: Exp
NEW NODE: INT
[ 43]             INT: 4
NEW NODE: Exp
NEW NODE: RP
[ 43]              RP: )
NEW NODE: Exp
NEW NODE: Args
NEW NODE: Exp
NEW NODE: SEMI
[ 43]            SEMI: ;
NEW NODE: Stmt
NEW NODE: RETURN
[ 44]          RETURN: return
NEW NODE: ID
[ 44]              ID: i
NEW NODE: PLUS
[ 44]            PLUS: +
NEW NODE: Exp
NEW NODE: ID
[ 44]              ID: j
NEW NODE: SEMI
[ 44]            SEMI: ;
NEW NODE: Exp
NEW NODE: Exp
NEW NODE: Stmt
NEW NODE: RC
[ 45]              RC: }
NEW NODE: StmtList
NEW NODE: StmtList
NEW NODE: StmtList
NEW NODE: StmtList
NEW NODE: StmtList
NEW NODE: StmtList
NEW NODE: StmtList
NEW NODE: CompSt
NEW NODE: ExtDef
NEW NODE: ExtDefList
NEW NODE: ExtDefList
NEW NODE: ExtDefList
NEW NODE: ExtDefList
NEW NODE: ExtDefList
NEW NODE: Program
Miss 0 Syntax Error.
IN SEMANTIC ANALYSIS
Search for Insert: name: sequences, ns: 2
Insert Symbol: name: sequences
------------------------------
stack 0:
	name: sequences, src: GVAR
------------------------------
[DEBUG] Finish Analysing VarDec4Var.
[DEBUG] Finish Analysing VarDec4Var.
[DEBUG] Finish Analysing VarDec4Var.
[DEBUG] Finish Analysing ExtDecList.
[DEBUG] Finish Analysing ExtDef.
Search for Insert: name: p, ns: 3
Insert Symbol: name: p
------------------------------
stack 1:
	name: p, src: LVAR
stack 0:
	name: sequences, src: GVAR
------------------------------
[DEBUG] Finish Analysing VarDec4Param.
[DEBUG] Finish Analysing ParamDec.
[DEBUG] Finish Analysing VarList.
[DEBUG] Finish Analysing FunDec.
Search for Insert: name: addEach, ns: 0
Insert Symbol: name: addEach
------------------------------
stack 1:
	name: p, src: LVAR
stack 0:
	name: addEach, src: FUNC
	name: sequences, src: GVAR
------------------------------
Search for Insert: name: i, ns: 3
Insert Symbol: name: i
------------------------------
stack 1:
	name: i, src: LVAR
	name: p, src: LVAR
stack 0:
	name: addEach, src: FUNC
	name: sequences, src: GVAR
------------------------------
[DEBUG] Finish Analysing VarDec4Var.
[DEBUG] Finish Analysing Dec4LocalVar.
Search for Insert: name: j, ns: 3
Insert Symbol: name: j
------------------------------
stack 1:
	name: j, src: LVAR
	name: i, src: LVAR
	name: p, src: LVAR
stack 0:
	name: addEach, src: FUNC
	name: sequences, src: GVAR
------------------------------
[DEBUG] Finish Analysing VarDec4Var.
[DEBUG] Finish Analysing Dec4LocalVar.
[DEBUG] Finish Analysing DecList4LocalVar.
[DEBUG] Finish Analysing DecList4LocalVar.
[DEBUG] Finish Analysing Def4LocalVar.
[DEBUG] Finish Analysing DefList4LocalVar.
[DEBUG] Finish Analysing DefList4LocalVar.
Search for Use: name: i, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Stmt.
Search for Use: name: j, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Stmt.
Search for Use: name: i, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing DefList4LocalVar.
Search for Use: name: j, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing DefList4LocalVar.
Search for Use: name: sequences, ns: 3
Search for Use: name: sequences, ns: 2
[DEBUG] Finish Analysing Exp.
Search for Use: name: i, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
Search for Use: name: j, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
Search for Use: name: sequences, ns: 3
Search for Use: name: sequences, ns: 2
[DEBUG] Finish Analysing Exp.
Search for Use: name: i, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
Search for Use: name: j, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
Search for Use: name: p, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Stmt.
Search for Use: name: j, ns: 3
[DEBUG] Finish Analysing Exp.
Search for Use: name: j, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Stmt.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing CompSt.
Clear Stack Top
------------------------------
stack 3:
stack 2:
stack 1:
	name: j, src: LVAR
	name: i, src: LVAR
	name: p, src: LVAR
stack 0:
	name: addEach, src: FUNC
	name: sequences, src: GVAR
------------------------------
[DEBUG] Finish Analysing Stmt.
[DEBUG] Finish Analysing Stmt.
Search for Use: name: i, ns: 3
[DEBUG] Finish Analysing Exp.
Search for Use: name: i, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Stmt.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing CompSt.
Clear Stack Top
------------------------------
stack 2:
stack 1:
	name: j, src: LVAR
	name: i, src: LVAR
	name: p, src: LVAR
stack 0:
	name: addEach, src: FUNC
	name: sequences, src: GVAR
------------------------------
[DEBUG] Finish Analysing Stmt.
[DEBUG] Finish Analysing Stmt.
Search for Use: name: p, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Stmt.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing CompSt.
Clear Stack Top
------------------------------
stack 1:
stack 0:
	name: addEach, src: FUNC
	name: sequences, src: GVAR
------------------------------
[DEBUG] Finish Analysing ExtDef.
Search for Insert: name: p, ns: 3
Insert Symbol: name: p
------------------------------
stack 1:
	name: p, src: LVAR
stack 0:
	name: addEach, src: FUNC
	name: sequences, src: GVAR
------------------------------
[DEBUG] Finish Analysing VarDec4Param.
[DEBUG] Finish Analysing ParamDec.
[DEBUG] Finish Analysing VarList.
[DEBUG] Finish Analysing FunDec.
Search for Insert: name: mulEach, ns: 0
Insert Symbol: name: mulEach
------------------------------
stack 1:
	name: p, src: LVAR
stack 0:
	name: mulEach, src: FUNC
	name: addEach, src: FUNC
	name: sequences, src: GVAR
------------------------------
Search for Insert: name: i, ns: 3
Insert Symbol: name: i
------------------------------
stack 1:
	name: i, src: LVAR
	name: p, src: LVAR
stack 0:
	name: mulEach, src: FUNC
	name: addEach, src: FUNC
	name: sequences, src: GVAR
------------------------------
[DEBUG] Finish Analysing VarDec4Var.
[DEBUG] Finish Analysing Dec4LocalVar.
Search for Insert: name: j, ns: 3
Insert Symbol: name: j
------------------------------
stack 1:
	name: j, src: LVAR
	name: i, src: LVAR
	name: p, src: LVAR
stack 0:
	name: mulEach, src: FUNC
	name: addEach, src: FUNC
	name: sequences, src: GVAR
------------------------------
[DEBUG] Finish Analysing VarDec4Var.
[DEBUG] Finish Analysing Dec4LocalVar.
[DEBUG] Finish Analysing DecList4LocalVar.
[DEBUG] Finish Analysing DecList4LocalVar.
[DEBUG] Finish Analysing Def4LocalVar.
[DEBUG] Finish Analysing DefList4LocalVar.
[DEBUG] Finish Analysing DefList4LocalVar.
Search for Use: name: i, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Stmt.
Search for Use: name: j, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Stmt.
Search for Use: name: i, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing DefList4LocalVar.
Search for Use: name: j, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing DefList4LocalVar.
Search for Use: name: sequences, ns: 3
Search for Use: name: sequences, ns: 2
[DEBUG] Finish Analysing Exp.
Search for Use: name: i, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
Search for Use: name: j, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
Search for Use: name: sequences, ns: 3
Search for Use: name: sequences, ns: 2
[DEBUG] Finish Analysing Exp.
Search for Use: name: i, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
Search for Use: name: j, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
Search for Use: name: p, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Stmt.
Search for Use: name: j, ns: 3
[DEBUG] Finish Analysing Exp.
Search for Use: name: j, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Stmt.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing CompSt.
Clear Stack Top
------------------------------
stack 3:
stack 2:
stack 1:
	name: j, src: LVAR
	name: i, src: LVAR
	name: p, src: LVAR
stack 0:
	name: mulEach, src: FUNC
	name: addEach, src: FUNC
	name: sequences, src: GVAR
------------------------------
[DEBUG] Finish Analysing Stmt.
[DEBUG] Finish Analysing Stmt.
Search for Use: name: i, ns: 3
[DEBUG] Finish Analysing Exp.
Search for Use: name: i, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Stmt.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing CompSt.
Clear Stack Top
------------------------------
stack 2:
stack 1:
	name: j, src: LVAR
	name: i, src: LVAR
	name: p, src: LVAR
stack 0:
	name: mulEach, src: FUNC
	name: addEach, src: FUNC
	name: sequences, src: GVAR
------------------------------
[DEBUG] Finish Analysing Stmt.
[DEBUG] Finish Analysing Stmt.
Search for Use: name: p, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Stmt.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing CompSt.
Clear Stack Top
------------------------------
stack 1:
stack 0:
	name: mulEach, src: FUNC
	name: addEach, src: FUNC
	name: sequences, src: GVAR
------------------------------
[DEBUG] Finish Analysing ExtDef.
[DEBUG] Finish Analysing FunDec.
Search for Insert: name: main, ns: 0
Insert Symbol: name: main
------------------------------
stack 1:
stack 0:
	name: main, src: FUNC
	name: mulEach, src: FUNC
	name: addEach, src: FUNC
	name: sequences, src: GVAR
------------------------------
Search for Insert: name: i, ns: 3
Insert Symbol: name: i
------------------------------
stack 1:
	name: i, src: LVAR
stack 0:
	name: main, src: FUNC
	name: mulEach, src: FUNC
	name: addEach, src: FUNC
	name: sequences, src: GVAR
------------------------------
[DEBUG] Finish Analysing VarDec4Var.
[DEBUG] Finish Analysing Dec4LocalVar.
Search for Insert: name: j, ns: 3
Insert Symbol: name: j
------------------------------
stack 1:
	name: j, src: LVAR
	name: i, src: LVAR
stack 0:
	name: main, src: FUNC
	name: mulEach, src: FUNC
	name: addEach, src: FUNC
	name: sequences, src: GVAR
------------------------------
[DEBUG] Finish Analysing VarDec4Var.
[DEBUG] Finish Analysing Dec4LocalVar.
[DEBUG] Finish Analysing DecList4LocalVar.
[DEBUG] Finish Analysing DecList4LocalVar.
[DEBUG] Finish Analysing Def4LocalVar.
[DEBUG] Finish Analysing DefList4LocalVar.
[DEBUG] Finish Analysing DefList4LocalVar.
Search for Use: name: i, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Stmt.
Search for Use: name: j, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Stmt.
Search for Use: name: i, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing DefList4LocalVar.
Search for Use: name: j, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing DefList4LocalVar.
Search for Use: name: sequences, ns: 3
Search for Use: name: sequences, ns: 2
[DEBUG] Finish Analysing Exp.
Search for Use: name: i, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
Search for Use: name: j, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
Search for Use: name: i, ns: 3
[DEBUG] Finish Analysing Exp.
Search for Use: name: j, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Stmt.
Search for Use: name: j, ns: 3
[DEBUG] Finish Analysing Exp.
Search for Use: name: j, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Stmt.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing CompSt.
Clear Stack Top
------------------------------
stack 3:
stack 2:
stack 1:
	name: j, src: LVAR
	name: i, src: LVAR
stack 0:
	name: main, src: FUNC
	name: mulEach, src: FUNC
	name: addEach, src: FUNC
	name: sequences, src: GVAR
------------------------------
[DEBUG] Finish Analysing Stmt.
[DEBUG] Finish Analysing Stmt.
Search for Use: name: i, ns: 3
[DEBUG] Finish Analysing Exp.
Search for Use: name: i, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Stmt.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing CompSt.
Clear Stack Top
------------------------------
stack 2:
stack 1:
	name: j, src: LVAR
	name: i, src: LVAR
stack 0:
	name: main, src: FUNC
	name: mulEach, src: FUNC
	name: addEach, src: FUNC
	name: sequences, src: GVAR
------------------------------
[DEBUG] Finish Analysing Stmt.
[DEBUG] Finish Analysing Stmt.
Search for Use: name: addEach, ns: 0
Search for Use: name: i, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Args.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Stmt.
Search for Use: name: mulEach, ns: 0
Search for Use: name: j, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Args.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Stmt.
Search for Use: name: i, ns: 3
[DEBUG] Finish Analysing Exp.
Search for Use: name: j, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Stmt.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing CompSt.
Clear Stack Top
------------------------------
stack 1:
stack 0:
	name: main, src: FUNC
	name: mulEach, src: FUNC
	name: addEach, src: FUNC
	name: sequences, src: GVAR
------------------------------
[DEBUG] Finish Analysing ExtDef.
[DEBUG] Finish Analysing ExtDefList.
[DEBUG] Finish Analysing ExtDefList.
[DEBUG] Finish Analysing ExtDefList.
[DEBUG] Finish Analysing ExtDefList.
[DEBUG] Finish Analysing ExtDefList.
[DEBUG] Finish Analysing Program.
