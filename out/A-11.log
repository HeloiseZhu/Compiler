NEW NODE: TYPE
[  1]            TYPE: int
NEW NODE: Specifier
NEW NODE: ID
[  1]              ID: gcd
NEW NODE: LP
[  1]              LP: (
NEW NODE: TYPE
[  1]            TYPE: int
NEW NODE: Specifier
NEW NODE: ID
[  1]              ID: x
NEW NODE: VarDec
NEW NODE: COMMA
[  1]           COMMA: ,
NEW NODE: ParamDec
NEW NODE: TYPE
[  1]            TYPE: int
NEW NODE: Specifier
NEW NODE: ID
[  1]              ID: y
NEW NODE: VarDec
NEW NODE: RP
[  1]              RP: )
NEW NODE: ParamDec
NEW NODE: VarList
NEW NODE: VarList
NEW NODE: FunDec
NEW NODE: LC
[  1]              LC: {
NEW NODE: IF
[  2]              IF: if
NEW NODE: DefList
NEW NODE: LP
[  2]              LP: (
NEW NODE: ID
[  2]              ID: x
NEW NODE: RELOP
[  2]           RELOP: ==
NEW NODE: Exp
NEW NODE: INT
[  2]             INT: 0
NEW NODE: Exp
NEW NODE: RP
[  2]              RP: )
NEW NODE: Exp
NEW NODE: RETURN
[  2]          RETURN: return
NEW NODE: ID
[  2]              ID: y
NEW NODE: SEMI
[  2]            SEMI: ;
NEW NODE: Exp
NEW NODE: Stmt
NEW NODE: RETURN
[  3]          RETURN: return
NEW NODE: Stmt
NEW NODE: ID
[  3]              ID: gcd
NEW NODE: LP
[  3]              LP: (
NEW NODE: ID
[  3]              ID: y
NEW NODE: MINUS
[  3]           MINUS: -
NEW NODE: Exp
NEW NODE: ID
[  3]              ID: x
NEW NODE: COMMA
[  3]           COMMA: ,
NEW NODE: Exp
NEW NODE: Exp
NEW NODE: ID
[  3]              ID: x
NEW NODE: RP
[  3]              RP: )
NEW NODE: Exp
NEW NODE: Args
NEW NODE: Args
NEW NODE: Exp
NEW NODE: SEMI
[  3]            SEMI: ;
NEW NODE: Stmt
NEW NODE: RC
[  4]              RC: }
NEW NODE: StmtList
NEW NODE: StmtList
NEW NODE: StmtList
NEW NODE: CompSt
NEW NODE: ExtDef
NEW NODE: TYPE
[  6]            TYPE: int
NEW NODE: Specifier
NEW NODE: ID
[  6]              ID: main
NEW NODE: LP
[  6]              LP: (
NEW NODE: RP
[  6]              RP: )
NEW NODE: FunDec
NEW NODE: LC
[  6]              LC: {
NEW NODE: TYPE
[  7]            TYPE: int
NEW NODE: Specifier
NEW NODE: ID
[  7]              ID: gdd
NEW NODE: VarDec
NEW NODE: COMMA
[  7]           COMMA: ,
NEW NODE: Dec
NEW NODE: ID
[  7]              ID: i
NEW NODE: VarDec
NEW NODE: COMMA
[  7]           COMMA: ,
NEW NODE: Dec
NEW NODE: ID
[  7]              ID: N
NEW NODE: VarDec
NEW NODE: COMMA
[  7]           COMMA: ,
NEW NODE: Dec
NEW NODE: ID
[  7]              ID: sum
NEW NODE: VarDec
NEW NODE: SEMI
[  7]            SEMI: ;
NEW NODE: Dec
NEW NODE: DecList
NEW NODE: DecList
NEW NODE: DecList
NEW NODE: DecList
NEW NODE: Def
NEW NODE: ID
[  8]              ID: gdd
NEW NODE: DefList
NEW NODE: DefList
NEW NODE: ASSIGNOP
[  8]        ASSIGNOP: =
NEW NODE: Exp
NEW NODE: INT
[  8]             INT: 14
NEW NODE: Exp
NEW NODE: SEMI
[  8]            SEMI: ;
NEW NODE: Exp
NEW NODE: Stmt
NEW NODE: ID
[  9]              ID: N
NEW NODE: ASSIGNOP
[  9]        ASSIGNOP: =
NEW NODE: Exp
NEW NODE: INT
[  9]             INT: 12
NEW NODE: Exp
NEW NODE: SEMI
[  9]            SEMI: ;
NEW NODE: Exp
NEW NODE: Stmt
NEW NODE: ID
[ 10]              ID: i
NEW NODE: ASSIGNOP
[ 10]        ASSIGNOP: =
NEW NODE: Exp
NEW NODE: INT
[ 10]             INT: 0
NEW NODE: Exp
NEW NODE: SEMI
[ 10]            SEMI: ;
NEW NODE: Exp
NEW NODE: Stmt
NEW NODE: ID
[ 11]              ID: sum
NEW NODE: ASSIGNOP
[ 11]        ASSIGNOP: =
NEW NODE: Exp
NEW NODE: INT
[ 11]             INT: 0
NEW NODE: Exp
NEW NODE: SEMI
[ 11]            SEMI: ;
NEW NODE: Exp
NEW NODE: Stmt
NEW NODE: WHILE
[ 12]           WHILE: while
NEW NODE: LP
[ 12]              LP: (
NEW NODE: ID
[ 12]              ID: i
NEW NODE: RELOP
[ 12]           RELOP: <
NEW NODE: Exp
NEW NODE: ID
[ 12]              ID: N
NEW NODE: RP
[ 12]              RP: )
NEW NODE: Exp
NEW NODE: Exp
NEW NODE: LC
[ 12]              LC: {
NEW NODE: ID
[ 13]              ID: i
NEW NODE: DefList
NEW NODE: ASSIGNOP
[ 13]        ASSIGNOP: =
NEW NODE: Exp
NEW NODE: ID
[ 13]              ID: i
NEW NODE: PLUS
[ 13]            PLUS: +
NEW NODE: Exp
NEW NODE: INT
[ 13]             INT: 1
NEW NODE: Exp
NEW NODE: SEMI
[ 13]            SEMI: ;
NEW NODE: Exp
NEW NODE: Exp
NEW NODE: Stmt
NEW NODE: ID
[ 14]              ID: sum
NEW NODE: ASSIGNOP
[ 14]        ASSIGNOP: =
NEW NODE: Exp
NEW NODE: ID
[ 14]              ID: sum
NEW NODE: PLUS
[ 14]            PLUS: +
NEW NODE: Exp
NEW NODE: ID
[ 14]              ID: gcd
NEW NODE: LP
[ 14]              LP: (
NEW NODE: ID
[ 14]              ID: gdd
NEW NODE: COMMA
[ 14]           COMMA: ,
NEW NODE: Exp
NEW NODE: ID
[ 14]              ID: i
NEW NODE: RP
[ 14]              RP: )
NEW NODE: Exp
NEW NODE: Args
NEW NODE: Args
NEW NODE: Exp
NEW NODE: SEMI
[ 14]            SEMI: ;
NEW NODE: Exp
NEW NODE: Exp
NEW NODE: Stmt
NEW NODE: RC
[ 15]              RC: }
NEW NODE: StmtList
NEW NODE: StmtList
NEW NODE: StmtList
NEW NODE: CompSt
NEW NODE: Stmt
NEW NODE: Stmt
NEW NODE: RETURN
[ 16]          RETURN: return
NEW NODE: ID
[ 16]              ID: sum
NEW NODE: PLUS
[ 16]            PLUS: +
NEW NODE: Exp
NEW NODE: ID
[ 16]              ID: gdd
NEW NODE: LP
[ 16]              LP: (
NEW NODE: ID
[ 16]              ID: gdd
NEW NODE: COMMA
[ 16]           COMMA: ,
NEW NODE: Exp
NEW NODE: ID
[ 16]              ID: N
NEW NODE: STAR
[ 16]            STAR: *
NEW NODE: Exp
NEW NODE: INT
[ 16]             INT: 2
NEW NODE: Exp
NEW NODE: RP
[ 16]              RP: )
NEW NODE: Exp
NEW NODE: Args
NEW NODE: Args
NEW NODE: Exp
NEW NODE: SEMI
[ 16]            SEMI: ;
NEW NODE: Exp
NEW NODE: Stmt
NEW NODE: RC
[ 17]              RC: }
NEW NODE: StmtList
NEW NODE: StmtList
NEW NODE: StmtList
NEW NODE: StmtList
NEW NODE: StmtList
NEW NODE: StmtList
NEW NODE: StmtList
NEW NODE: CompSt
NEW NODE: ExtDef
NEW NODE: ExtDefList
NEW NODE: ExtDefList
NEW NODE: ExtDefList
NEW NODE: Program
Miss 0 Syntax Error.
IN SEMANTIC ANALYSIS
[DEBUG] Finish Analysing Specifier.
[DEBUG] Finish Analysing Specifier.
Search for Insert: name: x, ns: 3
Insert Symbol: name: x
------------------------------
stack 1:
	name: x, src: LVAR
stack 0:
------------------------------
[DEBUG] Finish Analysing VarDec4Param.
[DEBUG] Finish Analysing ParamDec.
[DEBUG] Finish Analysing Specifier.
Search for Insert: name: y, ns: 3
Insert Symbol: name: y
------------------------------
stack 1:
	name: y, src: LVAR
	name: x, src: LVAR
stack 0:
------------------------------
[DEBUG] Finish Analysing VarDec4Param.
[DEBUG] Finish Analysing ParamDec.
[DEBUG] Finish Analysing VarList.
[DEBUG] Finish Analysing VarList.
[DEBUG] Finish Analysing FunDec.
Search for Insert: name: gcd, ns: 0
Insert Symbol: name: gcd
------------------------------
stack 1:
	name: y, src: LVAR
	name: x, src: LVAR
stack 0:
	name: gcd, src: FUNC
------------------------------
[DEBUG] Finish Analysing DefList4LocalVar.
Search for Use: name: x, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
Search for Use: name: y, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Stmt.
[DEBUG] Finish Analysing Stmt.
Search for Use: name: gcd, ns: 0
Search for Use: name: y, ns: 3
[DEBUG] Finish Analysing Exp.
Search for Use: name: x, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
Search for Use: name: x, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Args.
[DEBUG] Finish Analysing Args.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Stmt.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing CompSt.
Clear Stack Top
------------------------------
stack 1:
stack 0:
	name: gcd, src: FUNC
------------------------------
[DEBUG] Finish Analysing ExtDef.
[DEBUG] Finish Analysing Specifier.
[DEBUG] Finish Analysing FunDec.
Search for Insert: name: main, ns: 0
Insert Symbol: name: main
------------------------------
stack 1:
stack 0:
	name: main, src: FUNC
	name: gcd, src: FUNC
------------------------------
[DEBUG] Finish Analysing Specifier.
Search for Insert: name: gdd, ns: 3
Insert Symbol: name: gdd
------------------------------
stack 1:
	name: gdd, src: LVAR
stack 0:
	name: main, src: FUNC
	name: gcd, src: FUNC
------------------------------
[DEBUG] Finish Analysing VarDec4Var.
[DEBUG] Finish Analysing Dec4LocalVar.
Search for Insert: name: i, ns: 3
Insert Symbol: name: i
------------------------------
stack 1:
	name: i, src: LVAR
	name: gdd, src: LVAR
stack 0:
	name: main, src: FUNC
	name: gcd, src: FUNC
------------------------------
[DEBUG] Finish Analysing VarDec4Var.
[DEBUG] Finish Analysing Dec4LocalVar.
Search for Insert: name: N, ns: 3
Insert Symbol: name: N
------------------------------
stack 1:
	name: N, src: LVAR
	name: i, src: LVAR
	name: gdd, src: LVAR
stack 0:
	name: main, src: FUNC
	name: gcd, src: FUNC
------------------------------
[DEBUG] Finish Analysing VarDec4Var.
[DEBUG] Finish Analysing Dec4LocalVar.
Search for Insert: name: sum, ns: 3
Insert Symbol: name: sum
------------------------------
stack 1:
	name: sum, src: LVAR
	name: N, src: LVAR
	name: i, src: LVAR
	name: gdd, src: LVAR
stack 0:
	name: main, src: FUNC
	name: gcd, src: FUNC
------------------------------
[DEBUG] Finish Analysing VarDec4Var.
[DEBUG] Finish Analysing Dec4LocalVar.
[DEBUG] Finish Analysing DecList4LocalVar.
[DEBUG] Finish Analysing DecList4LocalVar.
[DEBUG] Finish Analysing DecList4LocalVar.
[DEBUG] Finish Analysing DecList4LocalVar.
[DEBUG] Finish Analysing Def4LocalVar.
[DEBUG] Finish Analysing DefList4LocalVar.
[DEBUG] Finish Analysing DefList4LocalVar.
Search for Use: name: gdd, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Stmt.
Search for Use: name: N, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Stmt.
Search for Use: name: i, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Stmt.
Search for Use: name: sum, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Stmt.
Search for Use: name: i, ns: 3
[DEBUG] Finish Analysing Exp.
Search for Use: name: N, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing DefList4LocalVar.
Search for Use: name: i, ns: 3
[DEBUG] Finish Analysing Exp.
Search for Use: name: i, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Stmt.
Search for Use: name: sum, ns: 3
[DEBUG] Finish Analysing Exp.
Search for Use: name: sum, ns: 3
[DEBUG] Finish Analysing Exp.
Search for Use: name: gcd, ns: 0
Search for Use: name: gdd, ns: 3
[DEBUG] Finish Analysing Exp.
Search for Use: name: i, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Args.
[DEBUG] Finish Analysing Args.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Stmt.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing CompSt.
Clear Stack Top
------------------------------
stack 2:
stack 1:
	name: sum, src: LVAR
	name: N, src: LVAR
	name: i, src: LVAR
	name: gdd, src: LVAR
stack 0:
	name: main, src: FUNC
	name: gcd, src: FUNC
------------------------------
[DEBUG] Finish Analysing Stmt.
[DEBUG] Finish Analysing Stmt.
Search for Use: name: sum, ns: 3
[DEBUG] Finish Analysing Exp.
Search for Use: name: gdd, ns: 0
Search for Use: name: gdd, ns: 3
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Exp.
[DEBUG] Finish Analysing Stmt.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing StmtList.
[DEBUG] Finish Analysing CompSt.
Clear Stack Top
------------------------------
stack 1:
stack 0:
	name: main, src: FUNC
	name: gcd, src: FUNC
------------------------------
[DEBUG] Finish Analysing ExtDef.
[DEBUG] Finish Analysing ExtDefList.
[DEBUG] Finish Analysing ExtDefList.
[DEBUG] Finish Analysing ExtDefList.
[DEBUG] Finish Analysing Program.
